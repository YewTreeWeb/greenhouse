#!/bin/sh

### ERROR: display error if script failure. ###
trap 'ret=$?; test $ret -ne 0 && printf "\n ⛔️\e\033[0;31m  Germination failed!! \e\033[0m ⛔️\n" >&2; exit $ret' EXIT

set -e

### Get required file ###
if [[ -e fertilise ]]; then
	cd "$(dirname "$DIR")" \
		&& . "fertilise"
else
	printf "\n ⚠️ ./fertilise not found.\n"
	exit 1
fi

### Run Inital Script ###

printf "${green}
  ____                     _   _
 / ___|_ __ ___  ___ _ __ | | | | ___  _   _ ___  ___
| |  _| '__/ _ \/ _ \ '_ \| |_| |/ _ \| | | / __|/ _ \
| |_| | | |  __/  __/ | | |  _  | (_) | |_| \__ \  __/
 \____|_|  \___|\___|_| |_|_| |_|\___/ \__,_|___/\___|
${normal}"

printf "
LET'S START ${bold}PLANTING${normal}!
This is a shell script that aims to setup and/or maintain your Mac.
The script will ${green}install${reset}, ${blue}update${reset}, ${purple}backup${reset}, ${red}restore${reset}, or ${yellow}skip${reset} packages.

----
${bold}System Info:${normal}
// OS: ${dim}$(get_os) ${normal} // OS Version: ${dim}$(get_os_version) ${normal} // Shell: ${dim}$BASH ${normal} // Shell Version: ${dim}$BASH_VERSION${reset}

${dim}Copyright © 2023 | Mathew Teague.${normal}
----
\n
"

# Check for OS compatibility.
if [[ $(get_os) != "macOS" ]]; then
	cecho "Your current OS isn't compatible with GreenHouse. The plants weep with sadness!\n" $red
	exit;
fi

##############################
# Pre-install check. #
##############################
heading "Checking your internet connection..."
# check_internet_connection

##############################
# Ask user for command #
##############################
heading "What would you like to plant? 🌱"
printf "
 ${bold}1) ${normal}Setup Mac
 ${bold}2) ${normal}Update
 ${bold}3) ${normal}Backup
 ${bold}4) ${normal}Restore
\n
"
read -n 1 -s -r -p "> " choice

##############################
# Ask for and cache sudo password #
##############################
heading "Let's start by getting your admin password"
admin_pass
case $choice in
	1)
		##############################
		# Install dependencies #
		##############################
		heading "Installing System Dependencies…"

		if [[ ! $internet ]];
		then
			cecho "No internet connection avaliable! Please connect to the internet when possible and try again." $red
			exit;
		fi

		# Make sure you user/local exists.
		if [[ ! -d "/usr/local" ]]; then
			sudo mkdir "/usr/local"
			sudo chflags norestricted "/usr/local"
		fi

		# Make sure you user/local/bin exists.
		if [[ ! -d "/usr/local/bin" ]]; then
			sudo mkdir "/usr/local/bin"
			sudo chflags norestricted "/usr/local/bin"
		fi

		# Make sure you user/local/sbin exists.
		if [[ ! -d "/usr/local/sbin" ]]; then
			sudo mkdir "/usr/local/sbin"
			sudo chflags norestricted "/usr/local/sbin"
		fi

		# Add website folder.
		if [[ ! -d "$HOME/Sites/" ]]; then
			sudo mkdir "$HOME/Sites"
			sudo chown -R $(whoami):admin "$HOME/Sites"
		fi

		# Add developer folder.
		if [[ ! -d "$HOME/Developer/" ]]; then
			sudo mkdir "$HOME/Developer"
			sudo chown -R $(whoami):admin "$HOME/Developer"
		fi

		# Change Application permission
		sudo chflags norestricted "/Applications"

		# Check if xcode is installed. If not install it.
		if xcode-select -p &> /dev/null; then
			cecho "Xcode already installed. Skipping..." $dim
		else
			step "Installing Xcode..."
            # Install Xcode Command Line Tools
            xcode-select --install
			# Wait for the installation to finish (this can take some time)
            while ! xcode-select -p &> /dev/null; do
                sleep 5
            done
            if [ $? -eq 0 ]; then
			    cecho "Xcode successfully installed." $green
            fi
		fi

		# Check for Brew installation.
		if command -v brew &> /dev/null; then
            cecho "Homebrew already installed. Skipping..." $dim
		else
			step "Installing Homebrew..."
            # Install Homebrew
			/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            # Wait for the installation to finish
            while ! command -v brew &> /dev/null; do
                sleep 5
            done
            if [ $? -eq 0 ]; then
			    cecho "Homebrew successfully installed." $green
				step "Installing wget for future use..."
				brew install wget
				# Wait for the installation to finish
				while ps | grep -q "[b]rew install wget"; do
					sleep 5
				done
				if brew list wget; then
					cecho "Successfully installed wget." $green
				else
					cecho "Failed to install wget." $red
				fi
				printf "\n\n"
            fi
		fi

        # Check the architecture using the arch command
		# Get the process's interpreter
		interpreter=$(ps -p $$ -o comm=)
        if [[ "$(arch)" == "arm64" || "$interpreter" == *"Rosetta"* ]]; then
            # Make sure you /op/homebrew/bin exists.
            if [[ ! -d "/op/homebrew/bin" ]]; then
                sudo mkdir "/op/homebrew/bin"
            fi
            sudo chflags norestricted "/op/homebrew/bin"
            echo '# Install Homebrew packages in /op/homebrew/bin' >> $HOME/.zshrc
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $HOME/.zshrc
            eval "$(/opt/homebrew/bin/brew shellenv)"
            sudo ln -s /opt/homebrew/bin /usr/local/bin
        fi

		# Make sure system is running the latest Homebrew
		printf "Updating Homebrew..."
		brew update
        printf "\n"

		##############################
		# Installing zsh environment #
		##############################

		chmod +x propagation-station/setup/shell.zsh
		zsh propagation-station/setup/shell.zsh

		##############################
		# Add dotfiles #
		##############################

		heading "Adding system dotfiles"
		if [[ ! -f "$HOME/.gitattributes" ]]; then
			cp $location/seeds/.gitattributes $HOME
		fi
		if [[ ! -f "$HOME/.gitconfig" ]]; then
			cp $location/seeds/.gitconfig $HOME
		fi
		if [[ ! -f "$HOME/.gitignore" ]]; then
			cp $location/seeds/.gitignore $HOME
		fi
		if [[ ! -f "$HOME/.editorconfig" ]]; then
			cp $location/seeds/.editorconfig $HOME
		fi
		if [[ ! -f "$HOME/.curlrc" ]]; then
			cp $location/seeds/.curlrc $HOME
		fi
		if [[ ! -f "$HOME/.nvmrc" ]]; then
			cp $location/seeds/.nvmrc $HOME
		fi
		if [[ ! -f "$HOME/.hyper.js" ]]; then
			cp $location/seeds/.hyper.js $HOME
		fi
		if [[ ! -f "$HOME/.huskyrc" ]]; then
			cp $location/seeds/.huskyrc $HOME
		fi
		cecho "All dotfiles have been added." $green

		#############################################
		# Create a system SSH key #
		# See: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
		#############################################

		chmod +x propagation-station/setup/ssh.zsh
		zsh propagation-station/setup/ssh.zsh

        ##############################
		# Add git user config data #
		##############################

		chmod +x propagation-station/setup/gitconfig.zsh
		zsh propagation-station/setup/gitconfig.zsh

		##############################
		# Install Brews #
		##############################

		chmod +x propagation-station/setup/brew.zsh
		zsh propagation-station/setup/brew.zsh

        #############################################
		# Add ssh-key to GitHub via api
		# Reference new-computer github account
		#############################################

		chmod +x propagation-station/setup/github.zsh
		zsh propagation-station/setup/github.zsh

        #############################################
		# Install Alfred or Raycast
		#############################################

        chmod +x propagation-station/setup/alfred-raycast.zsh
		zsh propagation-station/setup/alfred-raycast.zsh

		###############################################################################
		# Install Apps from the web #
		###############################################################################

		chmod +x propagation-station/setup/web.zsh
		zsh propagation-station/setup/web.zsh

		###############################################################################
		# Install Node with NVM & NPM packages #
		###############################################################################

		chmod +x propagation-station/setup/node.zsh
		zsh propagation-station/setup/node.zsh

		###############################################################################
		# Setup Ruby and install Ruby gems #
		###############################################################################

		chmod +x propagation-station/setup/ruby.zsh
		zsh propagation-station/setup/ruby.zsh

		###############################################################################
		# PHP #
		###############################################################################

		chmod +x propagation-station/setup/php.zsh
		zsh propagation-station/setup/php.zsh

		###############################################################################
		# Install Hyper.js packages and config #
		###############################################################################

		heading "Installing Hyper.js packages"

		if command -v hyper &> /dev/null; then
			step "Installing Hyper packages..."
			for hyper in $(<$location/seeds/hyper); do
				if test ! "$(hyper list | grep $hyper)"; then
					installing "Installing $hyper"
					hyper i $hyper >/dev/null
					cecho "${bold}✓ $hyper package installed${normal}" $green
					printf "\n"
				else
					cecho "$hyper has already been installed. Skipped..." $dim
					printf "\n"
				fi
			done

			cecho "Successfully installed Hyper packages." $green
		else
			cecho "Unable to install Hyper packages. Please check your Homebrew cask installation." $red
		fi

		###############################################################################
		# VSCode configuration #
		###############################################################################

		chmod +x propagation-station/setup/vscode.zsh
		zsh propagation-station/setup/vscode.zsh

		###############################################################################
		# Install get_iplayer #
		###############################################################################

		chmod +x propagation-station/setup/iplayer.zsh
		zsh propagation-station/setup/iplayer.zsh

		###############################################################################
		# Install crunchy-cli #
		###############################################################################

		chmod +x propagation-station/setup/crunchy.zsh
		zsh propagation-station/setup/crunchy.zsh

		###############################################################################
		# Install custom keyboard #
		###############################################################################

		heading "Installing BritishLHash keyboard"

		layouts="/Library/Keyboard\ Layouts"
		sudo chflags norestricted "/Library/Keyboard\ Layouts/"
		if [[ -f "$layouts/BritishLHash.keylayout" ]]; then
			cecho "BritishLHash.keylayout has already been installed. Skipping..." $dim
		else
			cp $location/seeds/BritishLHash.keylayout $layouts/BritishLHash.keylayout
			cecho "BritishLHash.keylayout installed successfully" $green
		fi

		###############################################################################
		# Add last Fig configuration #
		###############################################################################

		if command -v fig; then
			heading "Fig Configuring"
			printf '\n\n# Fig post block. Keep at the bottom of this file.\n[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"\n\n' >> $HOME/.zshrc
			cecho "Congratulations completed last part of Fig configuration" $green
		fi

		#############################################
		# Set macOS Preferences - Borrowed from https://github.com/mathiasbynens/dotfiles/blob/master/.macos #
		#############################################

		# Close any open System Preferences panes, to prevent them from overriding
		# settings we’re about to change
		osascript -e 'tell application "System Preferences" to quit'

		# Ask for the administrator password upfront
		sudo -v

		# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
		while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

		###############################################################################
		# Adding Mac Preferences #
		###############################################################################

		heading "Configuring Mac settings"

		# Load macos file within the seeds directory into greenhouse file.
		if [[ ! -d "$DIR" ]];
		then
			. "$location/seeds/macos"
			cecho "All Mac settings configured and set. You may need to restart your terminal." $green
			source $shellProfile
			printf "\n"
		else
			printf "\n"
			cecho "⚠️ $location/seeds/macos not found." $red
			printf "\n"
		fi

		cecho "All seeds are sown. May the plants be ever in your favour!" $green
		printf '\n'
		;;
	2)
		##############################
		# Updating System #
		##############################
		heading 'Updating System'

		if [[ ! $internet ]];
		then
			cecho "No internet connection avaliable! Please connect to the internet when possible and try again." $red
			exit;
		fi

		if [[ ! -d "$location/pottingshed" ]]; then
			mkdir "$location/pottingshed"
		fi

		if [[ ! -d "$location/pottingshed/backups" ]]; then
			mkdir "$location/pottingshed/backups"
		fi

    printf "
    ${bold}1) ${normal}All
    ${bold}2) ${normal}NPM/Yarn
    ${bold}3) ${normal}Node
    ${bold}4) ${normal}Brew
    ${bold}5) ${normal}Apps
    ${bold}6) ${normal}Composer
    ${bold}7) ${normal}Gems
    ${bold}8) ${normal}Ruby
    ${bold}9) ${normal}WP-CLI
    \n
    "
		read -n 1 -s -r -p "> " update

		case $update in
			1)
				#########################################################################
				# Updating all #
				#########################################################################
				# Update Homebrew
				if command -v brew &> /dev/null; then
					local brew_backup_dir="$location/pottingshed/backups/brew"
					local brewfile_path="$HOME/Brewfile"
					# Get the number of existing backup files
    				local brew_num_backups=$(ls -1 "$brew_backup_dir" | wc -l)
					# Create the backup file name
					local brew_backup_filename="Brewfile_backup"

					step "Backing up Homebrew before update..."
					if [[ ! -f brewfile_path ]]; then
						brew bundle dump --file=${brewfile_path}
						brew bundle dump --file=${$brew_backup_dir}/${brew_backup_filename}
					else
						if [[ -f "$brew_backup_dir/$brew_backup_filename" ]]; then
							rm -rf "$brew_backup_dir/$brew_backup_filename"
						fi
						cp "$brewfile_path" "$brew_backup_dir/$brew_backup_filename"
					fi

					cecho "Brewfile backup created: $brew_backup_filename" $green
					printf "\n"
					step "Updating Brew..."
					brew update
					brew upgrade
					brew cleanup
					brew cleanup -s
					cecho "Successfully updated Homebrew and Homebrew packages to the latest version." $green
					printf "\n"
				else
					cecho "Can't find an installtion of Homebrew. Skipping..." $dim
					printf "\n"
				fi

				# Update Ruby
                step "Backing up Ruby gems before update..."
                if [[ -f $HOME/Gemfile ]]; then
					if [[ -f $location/pottingshed/Gemfile_backup ]];
					then
						rm -rf $location/pottingshed/Gemfile.bkp $location/pottingshed/Gemfile.lock.bkp
						cp $HOME/Gemfile $location/pottingshed/Gemfile_backup
						cp $HOME/Gemfile.lock $location/pottingshed/Gemfile_backup.lock
					else
                    	cp $HOME/Gemfile $location/pottingshed/Gemfile_backup
                    	cp $HOME/Gemfile.lock $location/pottingshed/Gemfile_backup.lock
					fi
                else
					if [[ -f $location/pottingshed/gems_backup ]]; then
						rm -rf $location/pottingshed/gems_backup
						gem list --no-versions >> $location/pottingshed/gems_backup
					else
                    	gem list --no-versions >> $location/pottingshed/gems_backup
					fi
                fi
				cecho "Successfully backed up Ruby gems." $green
				printf "\n"
				if test "$(which rbenv)"
				then
					step "Updating Ruby..."
					rubyVersion=$(rbenv install -l | grep -v - | tail -1)
					rbenv install $rubyVersion
					rbenv local $rubyVersion
					rbenv global $rubyVersion
					cecho "Successfully updated Ruby to the latest version." $green
					printf "\n"
				else
					cecho "Unable to update to the latest Ruby version." $dim
					cecho "Please check your rbenv installation and try again. Skipping..." $dim
					printf "\n"
				fi

				# Update Gems
				if test "$(gem -v)"
				then
					step "Updating Ruby gems..."
					if [[ -f $HOME/Gemfile ]];
					then
						bundle update
						bundle clean
						printf "\n"
					else
						gem update --system
						gem update
						gem cleanup
						printf "\n"
					fi
					rbenv rehash
					cecho "All gems successfully updated." $green
					printf "\n"
				else
					cecho "Can't find any gems, please check your Ruby installation. Skipping..." $dim
					printf "\n"
				fi

				# Update Composer
                if [[ ! "$(which composer)" ]];
                then
                    step "Backing up Composer packages before update..."
					if [[ -f $HOME/.composer/composer.json ]];
					then
						if [[ -f $location/pottingshed/composer.json.bkp ]];
						then
							read -p "There is a current Composer backup. Would you like to overwrite it? Y/n " $newComposer
							if [[ $newComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/composer.json.bkp
								cp $HOME/.composer/composer.json $location/pottingshed/composer.json.bkp
							else
								cecho "Composer backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.json $location/pottingshed/composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.composer/composer.lock ]];
					then
						if [[ -f $location/pottingshed/composer.lock.bkp ]];
						then
							read -p "There is a current Composer Lockfile backup. Would you like to overwrite it? Y/n " $newComposerLock
							if [[ $newComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/composer.lock.bkp
								cp $HOME/.composer/composer.lock $location/pottingshed/composer.lock.bkp
							else
								cecho "Composer Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.lock $location/pottingshed/composer.lock.bkp
						fi
					fi
					cecho "Successfully backed up Composer." $green
					printf "\n"
                    composer selfupdate
                    composer global upgrade
                    cecho "All Composer packages successfully updated." $green
					printf "\n"
                else
                    cecho "Unable to update Composer. Skipping..." $dim
					printf "\n"
                fi

				# Update WP-CLI
                if [[ ! "$(which wp)" ]];
                then
                    step "Backing up WP-CLI packages before update..."
					if [[ -f $HOME/.wp-cli/packages/composer.json ]];
					then
						if [[ -f $location/pottingshed/wp-composer.json.bkp ]];
						then
							read -p "There is a current CWP-CLI backup. Would you like to overwrite it? Y/n " $newWpComposer
							if [[ $newWpComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/composer.json.bkp
								cp $HOME/.wp-cli/packages/composer.json $location/pottingshed/wp-composer.json.bkp
							else
								cecho "WP-CLI backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.json $location/pottingshed/wp-composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.wp-cli/packages/composer.lock ]];
					then
						if [[ -f $location/pottingshed/wp-composer.lock.bkp ]];
						then
							read -p "There is a current WP-CLI Lockfile backup. Would you like to overwrite it? Y/n " $newWpComposerLock
							if [[ $newWpComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/wp-composer.lock.bkp
								cp $HOME/.wp-cli/packages/composer.lock $location/pottingshed/wp-composer.lock.bkp
							else
								cecho "WP-CLI Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.lock $location/pottingshed/wp-composer.lock.bkp
						fi
					fi
                    wp cli update
                    wp package update --all
                    cecho "All WP-CLI packages successfully updated." $green
					printf "\n"
                else
                    cecho "Unable to update WP-CLI. Skipping..." $dim
					printf "\n"
                fi

				# Update NVM
				if command -v nvm; then
                    step "Backing up NPM packages before update..."
                    if [[ -f $location/pottingshed/npm.bkp ]]; then
						rm -rf $location/pottingshed/npm.bkp
						npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/pottingshed/npm.bkp
                    else
				        npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/pottingshed/npm.bkp
                    fi
                    cecho "NPM packages successfully updated." $green
					printf "\n"

					step "Updating Node and NPM..."
					default_version=$(nvm version default)
					# Switches Node version with NVM and reinstalls packages
					nvm install --lts --latest-npm --reinstall-packages-from=${$default_version}
					nvm install node --latest-npm --reinstall-packages-from=${$default_version}
					nvm use node
					nvm alias default node
					printf \n
					echo "Node has been successfullyupdated and NPM packages from the NVM Node version $default_version, have been reinstalled."
                    printf "\n"
				else
					cecho "NVM not updated or changed. Aborted!" $red
                    printf "\n"
				fi

				# Update NPM
				step "Updating packages..."

				read -p "Would you like to use Yarn or NPM? yarn/npm" updatePkg

				if [[ $updatePkg == 'yarn' ]];
				then
					if test "$(which yarn)"
					then
						yarn global upgrade
					else
						cecho "Yarn not installed. To use Yarn run ${bold}brew install yarn${normal} or ${bold}curl -o- -L https://yarnpkg.com/install.sh | bash${normal}. Defaulting to NPM..." $yellow
						npm update -g
					fi
				else
					npm update -g
				fi

				cecho "Packages successfully updated." $green

				# Update Apple apps
				step "Updating Mac Store apps..."
				sudo softwareupdate --all --install --force
				cecho "Mac apps updated" $green

				printf "\n"
				printf "\n"
				cecho "Your system has been successfully updated. Enjoy the fruits of spring and summer!" $green
			;;
			2)
				###############################################################################
				# Updating NPM/Yarn packages #
				###############################################################################
				step "Updating Node packages..."
				read -p "Would you like to use yarn, pnpm or npm to update your packages? y/p/n" updatePkg

                step "Backing up packages before update..."
				if [[ -f $location/pottingshed/npm.bkp ]];
                then
                    read -p "There is a current NPM backup. Would you like to overwrite it? Y/n " $newNPM
                    if [[ $newNPM =~ ^([yY])$ ]];
                    then
                        rm -rf $location/pottingshed/npm.bkp
                        npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/pottingshed/npm.bkp
                    else
                        cecho "NPM backup already exists. Skipping..." $dim
                        printf "\n"
                    fi
                else
                    npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/pottingshed/npm.bkp
                fi
                cecho "Packages successfully updated." $green
                printf "\n"

				if [[ $updatePkg =~ ^([yY])$ ]];
				then
					if test "$(which yarn)"
					then
						yarn global upgrade
					else
						cecho "Yarn not installed. To use Yarn run ${bold}brew install yarn${normal} or ${bold}curl -o- -L https://yarnpkg.com/install.sh | bash${normal}. Defaulting to NPM..." $yellow
						npm update -g
					fi
				elif [[ $updatePkg =~ ^([pP])$ ]];
				then
					if test "$(which pnpm)"
					then
						pnpm up --latest --global
					else
						cecho "pnpm not installed. To use pnpm run ${bold}brew install pnpm${normal} or ${bold}curl -fsSL https://get.pnpm.io/install.sh | PNPM_VERSION=7.0.0-rc.5 sh -${normal}. Defaulting to NPM..." $yellow
						npm update -g
					fi
				else
					npm update -g
				fi
				cecho "All $updatePkg packages updated." $green
                printf "\n"
			;;
			3)
				###############################################################################
				# Switching Node versions with NVM #
				###############################################################################
				step "Changing Node versions..."
				read -p "What version would you like to change to?" $nodeChange

				if [[ "$(which nvm)" ]];
				then
					nodeVersion=$(node -v)
					nvm install ${nodeChange:-node} --reinstall-packages-from=$nodeVersion --latest-npm
					nvm use node
					nvm alias default ${nodeChange:-node}
					cecho "Node version successfully updated and changed to $(node -v)." $green
				else
					cecho "NVM NOT FOUND! Node version not updated or switched. Aborted!" $red
				fi
			;;
			4)
				###############################################################################
				# Updating and upgrading Homebrew #
				###############################################################################
				if test "$(which brew)"
				then
					step "Backing up Brew before update..."
					if [[ ! -f ${location}/pottingshed/backups/Brewfile.bkp ]];
					then
						brew bundle dump --file=${location}/pottingshed/backups/Brewfile.bkp
					else
						read -p "There is a current Brewfile backup. Would you like to overwrite it? Y/n " $newBrewfile
						if [[ $newBrewfile =~ ^([yY])$ ]];
						then
							rm -rf ${location}/pottingshed/backups/Brewfile.bkp
							brew bundle dump --file=${location}/pottingshed/backups/Brewfile.bkp
						else
							cecho "Homebrew backup aborted. Skipping..." $dim
							printf "\n"
						fi
					fi
					if [[ -f $HOME/Brewfile.lock.json ]];
					then
						cp $HOME/Brewfile.lock.json $location/pottingshed/Brewfile.lock.json.bkp
					fi
					cecho "Successfully backed all Homebrew packages." $green
					step "Updating Brew..."
					brew update
					brew upgrade
					brew cleanup
					brew cleanup -s
					cecho "Successfully updated all Homebrew to the latest versions." $green
					printf "\n"
				else
					cecho "Can't find an installtion of Homebrew. Skipping..." $dim
					printf "\n"
				fi
			;;
			5)
				###############################################################################
				# Updating macOS App Store apps #
				###############################################################################
				step "Updating Mac Store apps..."
				sudo softwareupdate --all --install --force
				# sudo rm -rf /Library/Developer/CommandLineTools
  				# sudo xcode-select --install
				cecho "All Apple apps updated" $green
			;;
			6)
				###############################################################################
				# Updating Composer #
				###############################################################################
				if [[ ! "$(which composer)" ]];
                then
                    step "Backing up Composer installs before update..."
                    if [[ -f $HOME/.composer/composer.json ]];
					then
						if [[ -f $location/pottingshed/composer.json.bkp ]];
						then
							read -p "There is a current Composer backup. Would you like to overwrite it? Y/n " $newComposer
							if [[ $newComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/composer.json.bkp
								cp $HOME/.composer/composer.json $location/pottingshed/composer.json.bkp
							else
								cecho "Composer backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.json $location/pottingshed/composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.composer/composer.lock ]];
					then
						if [[ -f $location/pottingshed/composer.lock.bkp ]];
						then
							read -p "There is a current Composer Lockfile backup. Would you like to overwrite it? Y/n " $newComposerLock
							if [[ $newComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/composer.lock.bkp
								cp $HOME/.composer/composer.lock $location/pottingshed/composer.lock.bkp
							else
								cecho "Composer Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.lock $location/pottingshed/composer.lock.bkp
						fi
					fi
					cecho "Successfully backed all Composer packages." $green
					printf "\n"
                    composer selfupdate
                    composer global upgrade
                    cecho "All Composer installs successfully updated." $green
                else
                    cecho "Unable to update Composer. Skipping..." $dim
                fi
			;;
			7)
				###############################################################################
				# Updating Ruby gems #
				###############################################################################
				step "Backing up Ruby gems before update..."
                if [[ -f $HOME/Gemfile ]];
                then
					if [[ -f $location/pottingshed/Gemfile.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/pottingshed/Gemfile.bkp $location/pottingshed/Gemfile.lock.bkp
							cp $HOME/Gemfile $location/pottingshed/Gemfile.bkp
                    		cp $HOME/Gemfile.lock $location/pottingshed/Gemfile.lock.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	cp $HOME/Gemfile $location/pottingshed/Gemfile.bkp
                    	cp $HOME/Gemfile.lock $location/pottingshed/Gemfile.lock.bkp
					fi
                else
					if [[ -f $location/pottingshed/gems.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/pottingshed/gems.bkp
							gem list --no-versions >> $location/pottingshed/gems.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	gem list --no-versions >> $location/pottingshed/gems.bkp
					fi
                fi
				cecho "Successfully backed up Ruby gems." $green
				printf "\n"

				if test ! "$(gem -v)"
                then
                    cecho "Unable to update Ruby gems.\n" $red
                else
					step "Updating Ruby gems..."
                    if [[ -f $HOME/Gemfile ]];
					then
						bundle update
						bundle clean
						printf "\n"
					else
						gem update --system
						gem update
						gem cleanup
						printf "\n"
					fi
					rbenv rehash
					cecho "All gems successfully updated." $green
					printf "\n"
                fi
			;;
			8)
				###############################################################################
				# Updating Ruby #
				###############################################################################
				step "Backing up Ruby gems before update..."
                if [[ -f $HOME/Gemfile ]];
                then
					if [[ -f $location/pottingshed/Gemfile.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/pottingshed/Gemfile.bkp $location/pottingshed/Gemfile.lock.bkp
							cp $HOME/Gemfile $location/pottingshed/Gemfile.bkp
                    		cp $HOME/Gemfile.lock $location/pottingshed/Gemfile.lock.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	cp $HOME/Gemfile $location/pottingshed/Gemfile.bkp
                    	cp $HOME/Gemfile.lock $location/pottingshed/Gemfile.lock.bkp
					fi
                else
					if [[ -f $location/pottingshed/gems.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/pottingshed/gems.bkp
							gem list --no-versions >> $location/pottingshed/gems.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	gem list --no-versions >> $location/pottingshed/gems.bkp
					fi
                fi
				cecho "Successfully backed up Ruby gems." $green
				printf "\n"
				if test "$(which rbenv)"
				then
					step "Updating Ruby..."
					rubyVersion=$(rbenv install -l | grep -v - | tail -1)
					rbenv install $rubyVersion
					rbenv local $rubyVersion
					rbenv global $rubyVersion
					cecho "Successfully updated Ruby to the latest version." $green
					printf "\n"
				else
					cecho "Unable to update to the latest Ruby version." $dim
					cecho "Please check your rbenv installation and try again. Skipping..." $dim
					printf "\n"
				fi
			;;
			9)
				###############################################################################
				# Updating WP-CLI #
				###############################################################################
				if [[ ! "$(which wp)" ]];
                then
                    step "Backing up WP-CLI packages before update..."
					if [[ -f $HOME/.wp-cli/packages/composer.json ]];
					then
						if [[ -f $location/pottingshed/wp-composer.json.bkp ]];
						then
							read -p "There is a current WP-CLI backup. Would you like to overwrite it? Y/n " $newWpComposer
							if [[ $newWpComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/composer.json.bkp
								cp $HOME/.wp-cli/packages/composer.json $location/pottingshed/wp-composer.json.bkp
							else
								cecho "WP-CLI backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.json $location/pottingshed/wp-composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.wp-cli/packages/composer.lock ]];
					then
						if [[ -f $location/pottingshed/wp-composer.lock.bkp ]];
						then
							read -p "There is a current WP-CLI Lockfile backup. Would you like to overwrite it? Y/n " $newWpComposerLock
							if [[ $newWpComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/pottingshed/wp-composer.lock.bkp
								cp $HOME/.wp-cli/packages/composer.lock $location/pottingshed/wp-composer.lock.bkp
							else
								cecho "WP-CLI Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.lock $location/pottingshed/wp-composer.lock.bkp
						fi
					fi
                    wp cli update
                    wp package update --all
                    cecho "All WP-CLI packages successfully updated." $green
					printf "\n"
                else
                    cecho "Unable to update WP-CLI. Skipping..." $dim
					printf "\n"
                fi
			;;
			*)
				printf "Update cancelled. But remember... ${blue}Winter is coming!${normal}\n"
				printf '\n'
				exit;
			;;
		esac
		;;
	3)
		##############################
		# Backing Up #
		##############################
		heading "Backing up packages"

		# Backup Homebrew
		if test ! "$(which brew)"
		then
			cecho "Unable to backup Homebrew. Please check your Homebrew installation." $red
		else
			step "Backing up Homebrew..."
			if [[ ! -f ${location}/pottingshed/backups/Brewfile.bkp ]];
			then
				HOMEBREW_NO_AUTO_UPDATE=1 brew bundle dump --file=${location}/pottingshed/backups/Brewfile.bkp
			else
				read -p "There is a current Brewfile backup. Would you like to overwrite it? Y/n " $newBrewfile
				if [[ $newBrewfile =~ ^([yY])$ ]];
				then
					rm -rf ${location}/pottingshed/backups/Brewfile.bkp
					HOMEBREW_NO_AUTO_UPDATE=1 brew bundle dump --file=${location}/pottingshed/backups/Brewfile.bkp
				else
					cecho "Homebrew backup aborted. Skipping..." $dim
					printf "\n"
				fi
			fi
			if [[ -f $HOME/Brewfile.lock.json ]];
			then
				cp $HOME/Brewfile.lock.json $location/pottingshed/Brewfile.lock.json.bkp
			fi
		fi

		# Save gems to bkp file.
		if test ! "$(gem -v)"
		then
			cecho "Unable to backup Ruby gems." $red
		else
			step "Backing up Ruby gems..."
			if [[ -f $HOME/Gemfile ]];
			then
				if [[ -f $location/pottingshed/Gemfile.bkp ]];
				then
					read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
					if [[ $newGemfile =~ ^([yY])$ ]];
					then
						rm -rf $location/pottingshed/Gemfile.bkp $location/pottingshed/Gemfile.lock.bkp
						cp $HOME/Gemfile $location/pottingshed/Gemfile.bkp
						cp $HOME/Gemfile.lock $location/pottingshed/Gemfile.lock.bkp
					else
						cecho "Gemfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/Gemfile $location/pottingshed/Gemfile.bkp
					cp $HOME/Gemfile.lock $location/pottingshed/Gemfile.lock.bkp
				fi
			else
				if [[ -f $location/pottingshed/gems.bkp ]];
				then
					read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
					if [[ $newGemfile =~ ^([yY])$ ]];
					then
						rm -rf $location/pottingshed/gems.bkp
						gem list --no-versions >> $location/pottingshed/gems.bkp
					else
						cecho "Gemfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					gem list --no-versions >> $location/pottingshed/gems.bkp
				fi
			fi
			cecho "Successfully backed up Ruby gems." $green
			printf "\n"
		fi

		# Save npm modules to bkp file.
		# todo: if npm directory exists and if node is installed.
		step "Backing up npm modules..."
		if [[ ! "$(npm -v)" ]]; then
			cecho "Unable to backup NPM modules." $red
		else
			if [[ -f $location/pottingshed/npm.bkp ]];
            then
                read -p "There is a current NPM backup. Would you like to overwrite it? Y/n " $newNPM
                if [[ $newNPM =~ ^([yY])$ ]];
                then
                    rm -rf $location/pottingshed/npm.bkp
                    npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/pottingshed/npm.bkp
                else
                    cecho "NPM backup already exists. Skipping..." $dim
                    printf "\n"
                fi
            else
                npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/pottingshed/npm.bkp
            fi
            cecho "NPM packages successfully updated." $green
            printf "\n"
		fi

		# sudo mkdir a copy of composer.json
		step "Backing up composer packages..."
		if [[ ! "$(which composer)" ]]; then
			cecho "Unable to backup Composer packages." $red
		else
			if [[ -f $HOME/.composer/composer.json ]];
			then
				if [[ -f $location/pottingshed/composer.json.bkp ]];
				then
					read -p "There is a current Composer backup. Would you like to overwrite it? Y/n " $newComposer
					if [[ $newComposer =~ ^([yY])$ ]];
					then
						rm -rf $location/pottingshed/composer.json.bkp
						cp $HOME/.composer/composer.json $location/pottingshed/composer.json.bkp
					else
						cecho "Composer backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.composer/composer.json $location/pottingshed/composer.json.bkp
				fi
			fi
			if [[ -f $HOME/.composer/composer.lock ]];
			then
				if [[ -f $location/pottingshed/composer.lock.bkp ]];
				then
					read -p "There is a current Composer Lockfile backup. Would you like to overwrite it? Y/n " $newComposerLock
					if [[ $newComposerLock =~ ^([yY])$ ]];
					then
						rm -rf $location/pottingshed/composer.lock.bkp
						cp $HOME/.composer/composer.lock $location/pottingshed/composer.lock.bkp
					else
						cecho "Composer Lockfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.composer/composer.lock $location/pottingshed/composer.lock.bkp
				fi
			fi
			cecho "Successfully backed all Composer packages." $green
			printf "\n"
		fi

		# Take a copy of wp-cli packages
		step "Backing up WP-CLI packages..."
		if [[ ! "$(which wp)" ]];
		then
			if [[ -f $HOME/.wp-cli/packages/composer.json ]];
			then
				if [[ -f $location/pottingshed/wp-composer.json.bkp ]];
				then
					read -p "There is a current WP-CLI backup. Would you like to overwrite it? Y/n " $newWpComposer
					if [[ $newWpComposer =~ ^([yY])$ ]];
					then
						rm -rf $location/pottingshed/composer.json.bkp
						cp $HOME/.wp-cli/packages/composer.json $location/pottingshed/wp-composer.json.bkp
					else
						cecho "WP-CLI backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.wp-cli/packages/composer.json $location/pottingshed/wp-composer.json.bkp
				fi
			fi
			if [[ -f $HOME/.wp-cli/packages/composer.lock ]];
			then
				if [[ -f $location/pottingshed/wp-composer.lock.bkp ]];
				then
					read -p "There is a current WP-CLI Lockfile backup. Would you like to overwrite it? Y/n " $newWpComposerLock
					if [[ $newWpComposerLock =~ ^([yY])$ ]];
					then
						rm -rf $location/pottingshed/wp-composer.lock.bkp
						cp $HOME/.wp-cli/packages/composer.lock $location/pottingshed/wp-composer.lock.bkp
					else
						cecho "WP-CLI Lockfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.wp-cli/packages/composer.lock $location/pottingshed/wp-composer.lock.bkp
				fi
			fi
			cecho "All WP-CLI packages successfully backed up." $green
			printf "\n"
		else
			cecho "Unable to backup WP-CLI. Skipping..." $dim
			printf "\n"
		fi

		printf '\n'
		cecho "Ah that feeling when you know all your plants are safely stored for the Winter." $green
		printf '\n'
		;;
	4)
		##############################
		# Restoring #
		##############################
		heading "Restoring packages"

		# Check if restore folder exists
		if [[ ! -d "$location/pottingshed" ]]; then
			mkdir "$location/pottingshed"
		fi

		# Restoring Brews & mas
		if test ! "$(which brew)"
		then
			cecho "Unable to restore Homebrew and mas. Please check your Homebrew and mas installations." $red
		else
			step "Restoring Homebrew..."

			if [[ -f $location/pottingshed/Brewfile.bkp ]];
			then
				if [[ ! -d "$location/pottingshed/brew" ]]; then
					mkdir "$location/pottingshed/brew"
				fi

				step "Restoring from Brewfile.bkp..."

				if [[ -f "$location/pottingshed/Brewfile.lock.json.bkp" ]]; then
					read -p "Would you like to restore Brewfile.lock.json? Y/n" restoreBrewLock

					if [[ $restoreBrewLock =~ ^([yY])$ ]];
					then
						mv $location/pottingshed/Brewfile.lock.json.bkp $HOME/Brewfile.lock.json
						cp $location/pottingshed/Brewfile.bkp $HOME/Brewfile
						cd $HOME
						brew bundle
						cd $location
					fi
				fi

				if [[ ! -f "$location/pottingshed/Brewfile.lock.json.bkp" ]] || [[ $restoreBrewLock =~ ^([nN])$ ]];
				then
					cp $location/pottingshed/Brewfile.bkp $location/pottingshed/brew/Brewfile
					cd $location/pottingshed/brew
					brew bundle
					cd $location
					mv $location/pottingshed/brew/Brewfile $HOME/Brewfile

					if [[ ! -f "$HOME/Brewfile.lock.json" ]]; then
						mv $location/pottingshed/brew/Brewfile.lock.json $HOME/Brewfile.lock.json
					fi
				fi

				cecho "Successfully restored all Homebrew formulaes, casks and mas installs." $green
			else
				cecho "Unable to locate backup file. Skipping restore..." $red
			fi
		fi

		# Restoring gems
		if test ! "$(gem -v)";
		then
			cecho "Unable to restore Ruby gems." $red
		else
			if [[ ! -d "$location/pottingshed/gems" ]]; then
				mkdir "$location/pottingshed/gems"
			fi

			read -p "Would you like to restore with Bundler or standard gam restore? b/s" rubyGems
			step "Restoring you Ruby gems..."
			if [[ $rubyGems =~ ^([bB][bundlerBundler]|[bB])$ ]];
			then
				if [[ -f $location/pottingshed/Gemfile ]];
				then
					cp $location/pottingshed/Gemfile $HOME
					cp $location/pottingshed/Gemfile.lock $HOME
					bundle install --quiet
					if [[ $internet ]];
					then
						bundle update --quiet
					fi
					rbenv rehash
					cecho "Successfully restored all gems with Bundler, from Gemfile." $green
				else
					cecho "No Gemfile found. Unable to restore Ruby gems." $red
				fi
			else
				if [[ -f $location/pottingshed/gems.bkp ]];
				then
					cp $location/pottingshed/gems.bkp $location/pottingshed/gems
					cd $location/pottingshed/gems
					xargs gem unpack < $location/pottingshed/gems.bkp

					if [[ $internet ]];
					then
						xargs gem install < $location/pottingshed/gems.bkp
						printf '\n'
					else
						cecho "No internet connection detected. Please update when possible. Continuing restore..." $yellow
						xargs -I gemname gem build gemname/gemname.gemspec < $location/pottingshed/gems.bkp
						printf '\n'
					fi

					cd $location
					rm -rf $location/pottingshed/gems/* # Remove all unpacked gems to save storage.
					cecho "Successfully restored all gems." $green
				else
					cecho "No gem backup file found. Unable to restore Ruby gems." $red
				fi
			fi

		fi

		cecho "It's been a long winter but let's get those plants flowring again." $green
		printf '\n'
		;;
	*)
		printf "Thank you for using GreenHouse. Have a lovely sunny day and may the plants be ever in your favour.\n"
		printf '\n'
		exit;
		;;
esac

# Make script a global command
if [[ ! -d "/usr/local/bin/greenhouse" ]];
then
	printf '\n'
	heading "Making Greenhouse global"
	chmod u+x $location
	cp -r $location /usr/local/bin
	printf "Thank you once again for using GreenHouse. You can now easily check on your plants from anywhere. Have a lovely sunny day and may the plants be ever in your favour!\n"
	printf '\n'
	exit;
fi
