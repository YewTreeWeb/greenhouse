#!/bin/sh

### ERROR: display error if script failure. ###
trap 'ret=$?; test $ret -ne 0 && printf "\n ⛔️\e\033[0;31m  Germination failed!! \e\033[0m ⛔️\n" >&2; exit $ret' EXIT

set -e

### Get required file ###
if [[ -e fertilise ]]; then
	cd "$(dirname "$DIR")" \
		&& . "fertilise"
else
	printf "\n ⚠️ ./fertilise not found.\n"
	exit 1
fi

### Run Inital Script ###

printf "${green}
  ____                     _   _
 / ___|_ __ ___  ___ _ __ | | | | ___  _   _ ___  ___
| |  _| '__/ _ \/ _ \ '_ \| |_| |/ _ \| | | / __|/ _ \
| |_| | | |  __/  __/ | | |  _  | (_) | |_| \__ \  __/
 \____|_|  \___|\___|_| |_|_| |_|\___/ \__,_|___/\___|
${normal}"

printf "
LET'S START ${bold}PLANTING${normal}!
This is a shell script that aims to setup and/or maintain your Mac.
The script will ${green}install${reset}, ${blue}update${reset}, ${purple}backup${reset}, ${red}restore${reset}, or ${yellow}skip${reset} packages.

----
${bold}System Info:${normal}
// OS: ${dim}$(get_os) ${normal} // OS Version: ${dim}$(get_os_version) ${normal} // Shell: ${dim}$BASH ${normal} // Shell Version: ${dim}$BASH_VERSION${reset}

${dim}Copyright © 2020 | Mathew Teague.${normal}
----
\n
"

# Check for OS compatibility.
if [[ $(get_os) != "macOS" ]]; then
	cecho "Your current OS isn't compatible with GreenHouse. The plants weep with sadness!\n" $red
	exit;
fi

##############################
# Pre-install check. #
##############################
heading "Checking your internet connection..."
check_internet_connection

##############################
# Ask user for command #
##############################
heading "What would you like to plant? 🌱"
printf "
 ${bold}1) ${normal}Setup Mac
 ${bold}2) ${normal}Update
 ${bold}3) ${normal}Backup
 ${bold}4) ${normal}Restore
\n
"
read -n 1 -s -r -p "> " choice

##############################
# Ask for and cache sudo password #
##############################
heading "Let's start by getting your admin password"
admin_pass
case $choice in
	1)
		##############################
		# Install dependencies #
		##############################
		heading "Installing System Dependencies…"

		if [[ ! $internet ]];
		then
			cecho "No internet connection avaliable! Please connect to the internet when possible and try again." $red
			exit;
		fi

		# Make sure you user/local exists.
		if [[ ! -d "/usr/local" ]]; then
			sudo mkdir "/usr/local"
			sudo chflags norestricted "/usr/local"
		fi

		# Check if system bin folder exists.
		if [[ ! -d "$HOME/.bin/" ]]; then
			sudo mkdir "$HOME/.bin"
		fi

		# Check if system sbin folder exists.
		if [[ ! -d "$HOME/.sbin/" ]]; then
			sudo mkdir "$HOME/.sbin"
		fi

		# Add website folder.
		if [[ ! -d "$HOME/Sites/" ]]; then
			sudo mkdir "$HOME/Sites"
		fi

		# Add developer folder.
		if [[ ! -d "$HOME/Developer/" ]]; then
			sudo mkdir "$HOME/Developer"
		fi

		# Check if xcode is installed. If not install it.
		if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
			test -d "${xpath}" && test -x "${xpath}" ; then
			cecho "Xcode already installed. Skipping..." $dim
		else
			step "Installing Xcode..."
			xcode-select --install
			cecho "Xcode successfully installed." $green
		fi

		# Check for Brew installation.
		if test ! "$(which brew)"
		then
			step "Installing Homebrew..."
			## Don't prompt for confirmation when installing homebrew
			/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
			cecho "Homebrew successfully installed." $green
		else
			cecho "Homebrew already installed. Skipping..." $dim
		fi

		# Remove Old brew-cask if found.
		if brew list | grep -Fq brew-cask;
		then
			step "Uninstalling old Homebrew Cask..."
			brew uninstall --force brew-cask
			cecho "Homebrew-Cask uninstalled!" $green
		fi

		# Make sure system is running the latest Homebrew
		printf "Updating Homebrew..."
		brew update --force 2> /dev/null

		##############################
		# Add dotfiles #
		##############################

		heading "Adding system dotfiles"

		if [[ ! -f "$HOME/.gitattributes" ]];
		then
			cp $location/seeds/.gitattributes $HOME
		fi
		# if [[ ! -f "$HOME/.gitconfig" ]];
		# then
		# 	cp $location/seeds/.gitconfig $HOME
		# fi
		if [[ ! -f "$HOME/.gitignore" ]];
		then
			cp $location/seeds/.gitignore $HOME
		fi
		if [[ ! -f "$HOME/.editorconfig" ]];
		then
			cp $location/seeds/.editorconfig $HOME
		fi
		if [[ ! -f "$HOME/.curlrc" ]];
		then
			cp $location/seeds/.curlrc $HOME
		fi
		if [[ ! -f "$HOME/.nvmrc" ]];
		then
			cp $location/seeds/.nvmrc $HOME
		fi
		if [[ ! -f "$HOME/.hyper.js" ]];
		then
			cp $location/seeds/.hyper.js $HOME
		fi
		if [[ ! -f "$HOME/.huskyrc" ]];
		then
			cp $location/seeds/.huskyrc $HOME
		fi
		cecho "All dotfiles have been added." $green

		#############################################
		# Create a system SSH key #
		# See: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
		#############################################

		heading "Creating system SSH key"

		if [[ ! -e "$HOME/.ssh/id_rsa" ]];
		then
			# Check if ssh folder exists.
			if [[ ! -d "$HOME/.ssh/" ]]; then
				sudo mkdir $HOME/.ssh
			fi
			cd $HOME/.ssh

			step "Creating key and adding to agent."
			read -p 'Input email for ssh key: ' sshEmail
			ssh-keygen -t rsa -b 4096 -C "$sshEmail"  # will prompt for password
			eval "$(ssh-agent -s)"
			cd $location

			# If the OS version is equal to or higher than Sierra then ssh key will not be able to be saved to keychain.
			step "Adding SSH key to keychain..."
			ssh-add $HOME/.ssh/id_rsa
			cecho "If you are running macOS Sierra or lower you can add the ssh key to your keygen" $dim
			cecho "To add to keygen run ${bold}ssh-add -K $HOME/.ssh/id_rsa${normal}" $dim
			printf "\n"
			cecho "Successfully created SSH config file. Now creating SSH config file..." $green

			if [[ -e "$HOME/.ssh/config" ]]
			then
				cecho "An SSH config file already exists. Skipping... " $dim
			else
				step "Creating a new SSH config file with default settings..."
				create_ssh_config
				cecho "Successfully created SSH config file." $green
			fi
		else
			cecho "SSH key already created. Skipping..." $dim
		fi

		##############################
		# Install Brews #
		##############################

		heading "Installing Homebrew formulaes and casks"

		if [[ -e $location/seeds/Brewfile ]];
		then
			if test "$(which brew)"
			then
				step "Installing Brewfile..."

				# Check if user local Applications folder exists.
				if [[ ! -d "$HOME/Applications" ]]; then
					sudo mkdir "$HOME/Applications"
				fi

				cp $location/seeds/Brewfile $HOME
				cd $HOME
				brew bundle

				step "Updating Heroku Binary"
				brew unlink heroku
				brew link --overwrite heroku

				step "Updating pngnq Binary"
				brew unlink pngnq
				brew link --overwrite pngnq-s9

				# Adding add `$(brew --prefix coreutils)/libexec/gnubin` to `$PATH`.
				ln -s "${BREW_PREFIX}/bin/gsha256sum" "${BREW_PREFIX}/bin/sha256sum"

                # Install Shopify
                cecho "Shopify CLI replaces Theme Kit for most Shopify theme development tasks. You should use Shopify CLI if you're working on Online Store 2.0 themes. You should use Theme Kit instead of Shopify CLI only if you're working on older themes or you have Theme Kit integrated into your existing theme development workflows." $dim
                read -p "Would you like to install both or just the Shopify CLI, Theme Kit or none? B/s/t/n" whichShopifyCli

                if [[ $whichShopifyCli =~ ^([sS])$ ]];
                then
                    brew tap shopify/shopify
                    brew install shopify-cli
                    cecho "Shopify CLI successfully installed" $green
					shopfiy_dir_shortcut
                    printf "\n"
                elif [[ $whichShopifyCli =~ ^([tT])$ ]];
                then
                    brew tap shopify/shopify
                    brew install themekit
                    cecho "Theme Kit successfully installed" $green
					shopfiy_dir_shortcut
                    printf "\n"
                elif [[ $whichShopifyCli =~ ^([bB])$ ]];
                then
                    brew tap shopify/shopify
                    brew install shopify-cli
                    brew install themekit
                    cecho "Shopify CLI and Theme Kit successfully installed" $green
					shopfiy_dir_shortcut
                    printf "\n"
                else
                    cecho "Shopify CLI and Theme Kit installation aborted. Skipping..." $dim
                fi

                # Run Brew doctor
                brew doctor

				# Run a Homebrew cleanup.
				step "Cleaning up Homebrew..."
				brew cleanup 2> /dev/null
				brew cleanup -s 2> /dev/null

				cd $location
			else
				cecho "Homebrew may not be installed or you may not have internet. Please try again." $red
			fi
		fi

		##############################
		# Setup shell environment #
		##############################
		step "Setting up the Shell environment..."
        shell=$(echo "${0//-/}")

        if [[ $shell != '/usr/local/bin/zsh' ]]; then
            install_zsh
            cecho "Shell environment changed to ZSH." $green
            printf '\n'
        else
            cecho "Shell environment already set to ZSH. Skipping..." $dim
        fi

		#############################################
		# Add ssh-key to GitHub via api
		# Reference new-computer github account
		#############################################

        read -p "Would you like to add your ssh key to Github? Y/n " useGithub

        if [[ $useGithub =~ ^([yY])$ ]];
        then
            heading "Adding ssh-key to GitHub (via api)..."

            cecho "Important! For this step, use a github personal token with the admin:public_key permission." $yellow
            cecho "If you don't have one, create it here: https://github.com/settings/tokens/new" $yellow
            retries=3
            SSH_KEY=`cat $HOME/.ssh/id_rsa.pub`

            for ((i=0; i<retries; i++)); do
                read -p 'GitHub username: ' ghusername
                read -p 'Machine name: ' ghtitle
                read -sp 'GitHub personal token: ' ghtoken

                gh_status_code=$(curl -o /dev/null -s -w "%{http_code}\n" -u "$ghusername:$ghtoken" -d '{"title":"'$ghtitle'","key":"'"$SSH_KEY"'"}' 'https://api.github.com/user/keys')

                if (( $gh_status_code -eq == 201))
                then
                    cecho "GitHub ssh key added successfully!" $green
                    break
                else
                        cecho "${bold}Something went wrong${normal}. Enter your credentials and try again..." $yellow
                        echo -n "Status code returned: "
                        echo $gh_status_code
                fi
            done

            [[ $retries -eq i ]] && cecho "Adding ssh-key to GitHub failed! Try again later." $red
            printf "\n"

            # Add Github to ssh config file
            add_github_host

			# Login to Github command line tool
			gh auth login

        else
            cecho "Adding ssh-key to GitHub aborted. Skipping... " $dim
        fi

		##############################
		# Add git user config data #
		##############################

		heading "Adding user info to gitconfig..."

		if [[ ! -f "$HOME/.gitconfig" ]];
		then
			touch $HOME/.gitconfig
			read -p "What username would you like to add to the gitconfig file? Default is your user account ." gitUser
			read -p "Enter the email you would like to add to the gitconfig file? Default is the SSH email you set earlier. " gitEmail
			read -p "What would you like your default main branch to be called? Default will be master. `cecho $'\nhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and 'development'. You can renamed via this command: git branch -m <name> at any time' $dim``print $'\n> '` " gitBranchName
			read -p "What would you like your default pull request to be? Default will be merge. `cecho $'\nhint: git config pull.rebase false (merge), git config pull.rebase true (rebase), git config pull.ff only (fast-forward only).' $dim``print $'\n> '``cecho $'\nhint: Default will be 'pull.rebase false'. You can renamed via this command: git config --global <pull-type> at any time.' $dim``print $'\n> '` " gitPullRequest

			step "Adding Git config data..."
			git config --global user.name "${gitUser:-$USER}"
			git config --global user.email "${gitEmail:-$sshEmail}"
			git config --global init.defaultBranch ${gitBranchName:-'master'}
			git config --global ${gitPullRequest:-'pull.rebase false'}

			cecho "Git user data has been successfully added to .gitconfig" $green
		else
			cecho "A gitconfig already exists. Skipping..." $dim
		fi

		###############################################################################
		# Install Mac Store Apps #
		###############################################################################

		heading "Installing apps from the Mac Apps store"

		if test "$(which mas)"
		then
			echo "Opening App Store. Please login to continue."
			open "/Applications/App Store.app"
			read -p "Has login completed successfully (y/n)? " loginConfirm

			if [[ $loginConfirm != "${loginConfirm#[Yy]}" ]] && [[ -f $location/seeds/apps ]];
			then
				step "Installing Apple Store apps..."
				for app in $(<$location/seeds/apps); do
					# Remove App names from list.
					app=${app##:*}
					appId=${app%%:*}

					# Install app.
					if test ! "$(mas list | grep $appId)"; then
						installing "Installing $app"
						mas install $appId >/dev/null
						cecho "${bold}✓ $app installed${normal}" $green
						printf "\n"
					else
						cecho "$app has already been installed. Skipped..." $dim
						printf "\n"
					fi
				done

				cecho "Successfully installed App Store apps." $green
			else
				cecho "App Store login aborted. Skipping..." $dim
			fi
		else
			cecho "There appears to be a problem with mas. Please re-install and try again." $red
		fi

		###############################################################################
		# Install Mac None Store Apps #
		###############################################################################

		heading "Installing apps from the web"

		# Check if Composer is already installed.
		# Check if restore folder exists
        # Move into pottingshed/apps
		if [[ ! -d "$location/pottingshed" ]]; then
			sudo mkdir "$location/pottingshed"
		fi
		if [[ ! -d "$location/pottingshed/apps" ]]; then
			sudo mkdir "$location/pottingshed/apps"
		fi
		if [[ ! -d "$location/storage" ]]; then
			sudo mkdir "$location/storage"
		fi

		cd "$location/pottingshed/apps"

		if [[ ! -f "$HOME/Applications/Popcorn-Time.app" ]];
		then
            read -p "Would you like to install Popcorn Time? Y/n" popcorn
            if [[ $popcorn =~ ^([yY])$ ]];
			then
			    step "Downloading PopcornTime..."
                wget https://get.popcorntime.sh/build/Popcorn-Time-0.3.10-Mac.zip 2> /dev/null
                unzip Popcorn-Time-0.3.10-Mac.zip 2> /dev/null
                sudo mv Popcorn-Time.app $HOME/Applications
                cecho "Successfully downloaded and installed PopcornTime." $green
			else
				cecho "Popcorn Time installation aborted. Skipping..." $dim
			fi
		else
			cecho "PopcornTime already installed. Skipping..." $dim
		fi

		if [[ ! -f "$HOME/Applications/IconJar.app" ]];
		then
			step "Downloading IconJar..."
			cecho "GreenHouse will only install IconJar v1 as I don't like how it is now a subscription service." $dim
			cecho "For IconJar v2 run ${bold}brew install iconjar${normal}" $dim
			read -p "Continue with v1 install? Y/n" iconjar1
			if [[ $iconjar1 =~ ^([yY])$ ]];
			then
				wget https://dl.devmate.com/com.iconjar.iconjar/Iconjar.zip 2> /dev/null
				cp Iconjar.zip $location/storage # Move Iconjar.zip to storage encase creator removes option to download v1 in the future.
				unzip Iconjar.zip 2> /dev/null
				sudo mv IconJar.app $HOME/Applications
				cecho "Successfully downloaded and installed IconJar v1." $green
			else
				cecho "IconJar v1 installation aborted. Skipping..." $dim
			fi
		else
			cecho "IconJar already installed. Skipping..." $dim
		fi

		if [[ ! -f "/Applications/Amphetamine Enhancer.app" ]];
		then
            read -p "Would you like to download Amphetamine Enhancer? Y/n" amphetamine
            if [[ $amphetamine =~ ^([yY])$ ]];
			then
			    step "Downloading File..."
                cd $HOME/Downloads
                wget https://github.com/x74353/Amphetamine-Enhancer/raw/master/Releases/Current/Amphetamine%20Enhancer.dmg 2> /dev/null
                cd $location/pottingshed/apps
                cecho "Downloaded Amphetamine Enhancer into Downloads folder" $green
			else
				cecho "Amphetamine Enhancer download aborted. Skipping..." $dim
			fi
		else
			cecho "Amphetamine Enhancer already downloaded. Skipping..." $dim
		fi

		if [[ ! -f "/Applications/FileZilla.app" ]];
		then
            read -p "Would you like to download FileZilla? Y/n" filezilla
            if [[ $filezilla =~ ^([yY])$ ]];
			then
			    step "Downloading File..."
                cd $HOME/Downloads
                wget https://download.filezilla-project.org/client/FileZilla_3.46.3_macosx-x86_sponsored-setup.dmg 2> /dev/null
                cd $location/pottingshed/apps
                cecho "Downloaded FileZilla into Downloads folder" $green
			else
				cecho "FileZilla download aborted. Skipping..." $dim
			fi
		else
			cecho "FileZilla already downloaded. Skipping..." $dim
		fi

		# Come out of pottingshed.
		cd $location

		# Remove pottingshed/apps to save space
		rm -rf $location/pottingshed/apps/

		###############################################################################
		# Install Node with NVM & NPM packages #
		###############################################################################

		heading "Node with NVM & NPM packages"

		# Install NVM to manage Node.
		step "Installing NVM..."
		if [[ ! "$(which nvm)" ]];
		then
			if [[ ! $(grep "nvm" $location/seeds/brews) ]];
			then
				curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
			fi
		fi

		if [[ ! -f "$HOME/.nvmrc" ]];
		then
			touch $HOME/.nvmrc
			echo "lts/*" > $HOME/.nvmrc
		fi

		cecho "NVM has been installed and configured." $green

		step "Installing latest Node & LTS Node..."
		nvm install node
		nvm install --lts node
		nvm use --lts

		cecho "Successfully installed NVM, latest Node and LTS version\n" $green
		cecho "To use the latest version of Node as default run ${bold}nvm alias default node${normal} or ${bold}nvm alias default stable${normal}\n" $dim

		step "Installing packages..."
		read -p "Would you like to use yarn, pnpm or npm? y/p/n" installPkg

		if [[ -e $location/seeds/npm ]];
		then
			if [[ $installPkg =~ ^([yY])$ ]];
			then
				if test "$(which yarn)"
				then
					install_with_yarn
					xargs yarn global add < $location/seeds/npm
				else
					cecho "Yarn not installed. To use Yarn run ${bold}brew install yarn${normal} or ${bold}curl -o- -L https://yarnpkg.com/install.sh | bash${normal}. Defaulting to NPM..." $yellow
					xargs npm install -g < $location/seeds/npm
				fi
			elif [[ $installPkg =~ ^([pP])$ ]];
			then
				if test "$(which pnpm)"
				then
					xargs pnpm add -g < $location/seeds/npm
				else
					cecho "pnpm not installed. To use pnpm run ${bold}brew install pnpm${normal} or ${bold}curl -fsSL https://get.pnpm.io/install.sh | PNPM_VERSION=7.0.0-rc.5 sh -${normal}. Defaulting to NPM..." $yellow
					xargs npm install -g < $location/seeds/npm
				fi
			else
				xargs npm install -g < $location/seeds/npm
			fi
		fi
		cecho "All $installPkg packages installed." $green

		###############################################################################
		# Setup Ruby and install Ruby gems #
		###############################################################################

		heading "Setting up Ruby and installing Ruby gems"

		if test ! "$(which rbenv)"
		then
			cecho "Unable to install latest Ruby version. Please check your Homebrew installation and try again." $red
			printf "\n"
		else
			step "Configuring Ruby..."
			rubyVersion=$(rbenv install -l | grep -v - | tail -1)

			rbenv install $rubyVersion

            # Verify the state of your rbenv installation
            wget -q https://github.com/rbenv/rbenv-installer/raw/HEAD/bin/rbenv-doctor -O- | bash

			rbenv local $rubyVersion
			rbenv global $rubyVersion
		fi

		# Choose between bundler install or gem install.
		read -p "Would you like to install global Ruby gems with Bundler or with gem? b/s" rubyGems

		if test ! "$(gem -v)"
		then
			cecho "Unable to install Ruby gems.\n" $red
		else
			step "Installing Ruby gems..."
			if [[ $rubyGems =~ ^([bB][bundlerBundler]|[bB])$ ]];
			then
				if test ! "$(gem list bundler)"; then
					gem install bundler
				fi
				cd $HOME
				bundle init
				for bundle in $(<$location/seeds/bundles); do
					if test ! "$(bundle list | grep $bundle)"; then
						installing "Installing $bundle"
						bundle add $bundle >/dev/null
						cecho "${bold}✓ $bundle gem installed${normal}" $green
						printf "\n"
					else
						cecho "$bundle has already been installed. Skipped..." $dim
						printf "\n"
					fi
				done
				rbenv rehash
				cd $location
				printf "\n"
				cecho "Successfully installed Ruby gems with Bundler." $green
			else
				for gem in $(<$location/seeds/gems); do
					if test ! "$(gem list | grep $gem)"; then
						installing "Installing $gem"
						gem install $gem >/dev/null
						cecho "${bold}✓ $gem gem installed${normal}" $green
						printf "\n"
					else
						cecho "$gem has already been installed. Skipped..." $dim
						printf "\n"
					fi
				done

				cecho "Successfully installed Ruby gems." $green
			fi

			# Create folder for Laravel
			if [[ "$(which jekyll)" ]]; then
				step "Adding custom Jekyll directory..."
				jekyll_dir_shortcut
				cecho "Successfully add a custom Jekyll directory to the Sites directory." $green
			fi
		fi

		###############################################################################
		# Install Composer and packages #
		###############################################################################

		heading "Installing Composer and packages"

		# Make sure the Brew PHP service has started.
		brew services start php

		if [[ ! "$(which composer)" ]]; then
            # Check if Composer is already installed.
            # Check if subdirectoy folder exists
            if [[ ! -d "$location/pottingshed" ]]; then
                sudo mkdir "$location/pottingshed"
            fi
            if [[ ! -d "$location/pottingshed/composer" ]]; then
                sudo mkdir "$location/pottingshed/composer"
            fi
			# Go into composer folder.
			cd "$location/pottingshed/composer"

			step "Installing Composer..."

			# cd $location/pottingshed/composer
			php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('sha384', 'composer-setup.php') === '756890a4488ce9024fc62c56153228907f1545c228516cbf63f885e036d37e9a59d27d63f46af1d4d07ee0f76181c7d3') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"

			# Check if /usr/local/bin/composer exists.
			if [[ ! -d "/usr/local/bin/composer" ]]; then
				sudo mkdir /usr/local/bin/composer
			fi

			# Move composer file to bin so it can be a global command.
			sudo mv composer.phar /usr/local/bin/composer

			# Switch directory back to project root.
			cd $location

			# Clean out composer subdirectory to preserve space.
			rm -rf $location/pottingshed/composer

			cecho "Successfully installed Composer." $green
		else
			cecho "Composer already installed. Skipping..." $dim
		fi

		if [[ "$(which composer)" ]]; then
			step "Installing Composer packages..."
			for composer in $(<$location/seeds/composer); do
				if test ! "$(composer global info | grep $composer)"; then
					installing "Installing $composer"
					composer global require $composer >/dev/null
					cecho "${bold}✓ $composer package installed${normal}" $green
					printf "\n"
				else
					cecho "$composer has already been installed. Skipped..." $dim
					printf "\n"
				fi
			done
		else
			cecho "Unable to install Composer packages. Please try again." $red
		fi

		# Park Laravel Valet
		if [[ "$(which valet)" ]]; then
			step "Setting Laravel Valet's default directory..."
			cd $HOME/Sites
			valet park
			# Create folder for static sites
			step "Adding custom directory for static sites..."
			static_dir_shortcut
			cecho "Successfully set Laravel Valet's default directory to the Sites directory and created custom static directory." $green
		fi

		# Create folder for Laravel
		if [[ "$(which laravel)" ]]; then
			step "Adding custom Laravel directory..."
			laravel_dir_shortcut
			cecho "Successfully add a custom Laravel directory to the Sites directory." $green
		fi

		cd $location

		###############################################################################
		# Install WP-CLI and packages #
		###############################################################################

		heading "Installing WP-CLI and packages"

		if [[ ! "$(which wp)" ]]; then
			read -p 'Would you like to install WP-CLI? Y/n' wordpresscli
            if [[ $wordpresscli =~ ^([yY])$ ]];
            then
                # Check if Composer is already installed.
                # Check if restore folder exists
                if [[ ! -d "$location/pottingshed" ]]; then
                    sudo mkdir "$location/pottingshed"
                fi
                if [[ ! -d "$location/pottingshed/wpcli" ]]; then
                    sudo mkdir "$location/pottingshed/wpcli"
                fi
				# Go into composer folder.
				cd "$location/pottingshed/wpcli"

                step "Installing WP-CLI..."
                curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                chmod +x wp-cli.phar

				# Check if bin/wp exists.
				if [[ ! -d "usr/local/bin/wp" ]]; then
					sudo mkdir usr/local/bin/wp
				fi

                # Move wp-cli.phar file to bin so we can just use the wp command.
                sudo mv wp-cli.phar /usr/local/bin/wp

                # Switch directory back to project root.
                cd $location

                # Clean out wpcli subdirectory to preserve space.
                rm -rf $location/pottingshed/wpcli

				# Add WP standards with Composer
				if [[ "$(which composer)" ]]; then
					composer global require phpcompatibility/phpcompatibility-wp:*
					composer global require wp-coding-standards/wpcs
				fi

                # Resolve PHP Fatal error: Allowed memory size of 999999 bytes exhausted.
                fix_php_memory

                # Add helpful aliases to .zshrc
                zsh_wpcli_aliases

				# Add custom directory for WordPress sites
				wp_dir_shortcut

                cecho "Successfully installed WP-CLI." $green
            else
                cecho "WP-CLI installation aborted. Skipping..." $dim
            fi
		else
			cecho "WP-CLI already installed. Skipping..." $dim
		fi

        if [[ $wordpresscli =~ ^([yY])$ ]];
		then
            if [[ "$(which wp)" ]]; then
                step "Installing WP-CLI packages..."
                for wp in $(<$location/seeds/wpcli); do
                    if test ! "$(wp package list | grep $wp)"; then
                        installing "Installing $wp"
                        wp package install $wp >/dev/null
                        cecho "${bold}✓ $wp package installed${normal}" $green
                        printf "\n"
                    else
                        cecho "$wp has already been installed. Skipped..." $dim
                        printf "\n"
                    fi
                done

                cecho "Successfully installed WP-CLI packages." $green
            else
                cecho "Unable to install packages. Please try again." $red
            fi

        else
            cecho "WP-CLI installation aborted. Skipping package installations..." $dim
        fi

		###############################################################################
		# Install Self-Assigned SSL #
		###############################################################################

		heading "Installing system SSL"

		ssl_check

		###############################################################################
		# Install Meteor #
		###############################################################################

		heading "Installing Meteor"

        read -p "Would you like to install Meteor? Y/n" meteorInstall
        if [[ $meteorInstall =~ ^([yY])$ ]];
        then
            if test "$(meteor --help)"
            then
                cecho "Meteor already installed. Skipping..." $dim
            else
                curl https://install.meteor.com/ | sh
                cecho "Successfully installed Meteor." $green
            fi
        else
            cecho "Meteor installation aborted. Skipping..." $dim
        fi

		###############################################################################
		# Install Hyper.js packages and config #
		###############################################################################

		heading "Installing Hyper.js packages"

		if test "$(which hyper)"
		then
			# add shell env to hyper.js
			step "Configuring Hyper with selected shell env..."
			sed -i "" -e "s/shell: ''/shell: '$zshDIR'/g" $HOME/.hyper.js
			cecho "Successfully configured Hyper shell env." $green

			step "Installing Hyper packages..."
			for hyper in $(<$location/seeds/hyper); do
				if test ! "$(hyper list | grep $hyper)"; then
					installing "Installing $hyper"
					hyper i $hyper >/dev/null
					cecho "${bold}✓ $hyper package installed${normal}" $green
					printf "\n"
				else
					cecho "$hyper has already been installed. Skipped..." $dim
					printf "\n"
				fi
			done

			cecho "Successfully installed Hyper packages." $green
		else
			cecho "Unable to install Hyper packages. Please check your Homebrew cask installation." $red
		fi

		###############################################################################
		# Install VSCode extensions #
		###############################################################################

		heading "Installing VSCode extensions"

		if test "$(which code)"
		then
			vscode_commandline

			step "Installing extensions..."
			for vsCode in $(<$location/seeds/vscode_extensions); do
				if test ! "$(code --list-extensions | grep $vsCode)"; then
					installing "Installing $vsCode"
					code --install-extension $vsCode >/dev/null
					cecho "${bold}✓ $vsCode package installed${normal}" $green
					printf "\n"
				else
					cecho "$vsCode has already been installed. Skipped..." $dim
					printf "\n"
				fi
			done

			cecho "Successfully installed VSCode extensions." $green
		else
			cecho "Unable to install VSCode extensions. Please check your Homebrew cask installation." $red
		fi

		#############################################
		# Set OSX Preferences - Borrowed from https://github.com/mathiasbynens/dotfiles/blob/master/.macos #
		#############################################

		# Close any open System Preferences panes, to prevent them from overriding
		# settings we’re about to change
		osascript -e 'tell application "System Preferences" to quit'

		# Ask for the administrator password upfront
		sudo -v

		# Keep-alive: update existing `sudo` time stamp until `.macos` has finished
		while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

		###############################################################################
		# Adding Mac Preferences #
		###############################################################################

		heading "Configuring Mac settings"

		# Load macos file within the seeds directory into greenhouse file.
		if [[ ! -d "$DIR" ]];
		then
			. "$location/seeds/macos"

			cecho "All Mac settings configured and set. You may need to restart your terminal." $green
			source $shellProfile
			printf "\n"
		else
			printf "\n"
			cecho "⚠️ $location/seeds/macos not found." $red
			printf "\n"
		fi

		cecho "All seeds are sown. May the plants be ever in your favour!" $green
		printf '\n'
		;;
	2)
		##############################
		# Updating System #
		##############################
		heading 'Updating System'

		if [[ ! $internet ]];
		then
			cecho "No internet connection avaliable! Please connect to the internet when possible and try again." $red
			exit;
		fi

		if [[ ! -d "$location/storage" ]];
		then
			mkdir $location/storage
		fi

    printf "
    ${bold}1) ${normal}All
    ${bold}2) ${normal}NPM/Yarn
    ${bold}3) ${normal}Node
    ${bold}4) ${normal}Brew
    ${bold}5) ${normal}Apps
    ${bold}6) ${normal}Composer
    ${bold}7) ${normal}Gems
    ${bold}8) ${normal}Ruby
    ${bold}9) ${normal}WP-CLI
    \n
    "
		read -n 1 -s -r -p "> " update

		case $update in
			1)
				###############################################################################
				# Updating all #
				###############################################################################

                if [[ ! -d "${location}/storage" ]];
                then
                    mkdir ${location}/storage
                fi

				# Update Homebrew
				if test "$(which brew)"
				then
					step "Backing up Brew before update..."
					if [[ ! -f ${location}/storage/Brewfile.bkp ]];
					then
						brew bundle dump --file=${location}/storage/Brewfile.bkp
					else
						read -p "There is a current Brewfile backup. Would you like to overwrite it? Y/n " $newBrewfile
						if [[ $newBrewfile =~ ^([yY])$ ]];
						then
							rm -rf ${location}/storage/Brewfile.bkp
							brew bundle dump --file=${location}/storage/Brewfile.bkp
						else
							cecho "Homebrew backup already exists. Skipping..." $dim
							printf "\n"
						fi
					fi
					if [[ -f $HOME/Brewfile.lock.json ]];
					then
						cp $HOME/Brewfile.lock.json $location/storage/Brewfile.lock.json.bkp
					fi
					cecho "Successfully backed up Ruby gems." $green
					printf "\n"
					step "Updating Brew..."
					brew update
					brew upgrade
					brew cleanup
					brew cleanup -s
					cecho "Successfully updated all Homebrew to the latest versions." $green
					printf "\n"
				else
					cecho "Can't find an installtion of Homebrew. Skipping..." $dim
					printf "\n"
				fi

				# Update Ruby
                step "Backing up Ruby gems before update..."
                if [[ -f $HOME/Gemfile ]];
                then
					if [[ -f $location/storage/Gemfile.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/storage/Gemfile.bkp $location/storage/Gemfile.lock.bkp
							cp $HOME/Gemfile $location/storage/Gemfile.bkp
                    		cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	cp $HOME/Gemfile $location/storage/Gemfile.bkp
                    	cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
					fi
                else
					if [[ -f $location/storage/gems.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/storage/gems.bkp
							gem list --no-versions >> $location/storage/gems.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	gem list --no-versions >> $location/storage/gems.bkp
					fi
                fi
				cecho "Successfully backed up Ruby gems." $green
				printf "\n"
				if test "$(which rbenv)"
				then
					step "Updating Ruby..."
					rubyVersion=$(rbenv install -l | grep -v - | tail -1)
					rbenv install $rubyVersion
					rbenv local $rubyVersion
					rbenv global $rubyVersion
					cecho "Successfully updated Ruby to the latest version." $green
					printf "\n"
				else
					cecho "Unable to update to the latest Ruby version." $dim
					cecho "Please check your rbenv installation and try again. Skipping..." $dim
					printf "\n"
				fi

				# Update Gems
				if test "$(gem -v)"
				then
					step "Updating Ruby gems..."
					if [[ -f $HOME/Gemfile ]];
					then
						bundle update
						bundle clean
						printf "\n"
					else
						gem update --system
						gem update
						gem cleanup
						printf "\n"
					fi
					rbenv rehash
					cecho "All gems successfully updated." $green
					printf "\n"
				else
					cecho "Can't find any gems, please check your Ruby installation. Skipping..." $dim
					printf "\n"
				fi

				# Update Composer
                if [[ ! "$(which composer)" ]];
                then
                    step "Backing up Composer packages before update..."
					if [[ -f $HOME/.composer/composer.json ]];
					then
						if [[ -f $location/storage/composer.json.bkp ]];
						then
							read -p "There is a current Composer backup. Would you like to overwrite it? Y/n " $newComposer
							if [[ $newComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/composer.json.bkp
								cp $HOME/.composer/composer.json $location/storage/composer.json.bkp
							else
								cecho "Composer backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.json $location/storage/composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.composer/composer.lock ]];
					then
						if [[ -f $location/storage/composer.lock.bkp ]];
						then
							read -p "There is a current Composer Lockfile backup. Would you like to overwrite it? Y/n " $newComposerLock
							if [[ $newComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/composer.lock.bkp
								cp $HOME/.composer/composer.lock $location/storage/composer.lock.bkp
							else
								cecho "Composer Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.lock $location/storage/composer.lock.bkp
						fi
					fi
					cecho "Successfully backed up Composer." $green
					printf "\n"
                    composer selfupdate
                    composer global upgrade
                    cecho "All Composer packages successfully updated." $green
					printf "\n"
                else
                    cecho "Unable to update Composer. Skipping..." $dim
					printf "\n"
                fi

				# Update WP-CLI
                if [[ ! "$(which wp)" ]];
                then
                    step "Backing up WP-CLI packages before update..."
					if [[ -f $HOME/.wp-cli/packages/composer.json ]];
					then
						if [[ -f $location/storage/wp-composer.json.bkp ]];
						then
							read -p "There is a current CWP-CLI backup. Would you like to overwrite it? Y/n " $newWpComposer
							if [[ $newWpComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/composer.json.bkp
								cp $HOME/.wp-cli/packages/composer.json $location/storage/wp-composer.json.bkp
							else
								cecho "WP-CLI backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.json $location/storage/wp-composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.wp-cli/packages/composer.lock ]];
					then
						if [[ -f $location/storage/wp-composer.lock.bkp ]];
						then
							read -p "There is a current WP-CLI Lockfile backup. Would you like to overwrite it? Y/n " $newWpComposerLock
							if [[ $newWpComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/wp-composer.lock.bkp
								cp $HOME/.wp-cli/packages/composer.lock $location/storage/wp-composer.lock.bkp
							else
								cecho "WP-CLI Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.lock $location/storage/wp-composer.lock.bkp
						fi
					fi
                    wp cli update
                    wp package update --all
                    cecho "All WP-CLI packages successfully updated." $green
					printf "\n"
                else
                    cecho "Unable to update WP-CLI. Skipping..." $dim
					printf "\n"
                fi

				# Update NVM
				if [[ "$(which nvm)" ]];
				then
                    step "Backing up NPM packages before update..."
                    if [[ -f $location/storage/npm.bkp ]];
                    then
                        read -p "There is a current NPM backup. Would you like to overwrite it? Y/n " $newNPM
                        if [[ $newNPM =~ ^([yY])$ ]];
                        then
                            rm -rf $location/storage/npm.bkp
                            npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/npm.bkp
                        else
                            cecho "NPM backup already exists. Skipping..." $dim
                            printf "\n"
                        fi
                    else
				        npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/npm.bkp
                    fi
                    cecho "NPM packages successfully updated." $green
					printf "\n"

					step "Updating Node and NPM..."
                    nodeVersion=$(node -v)
					nvm install node --reinstall-packages-from=$nodeVersion --latest-npm
					nvm use node
					nvm alias default node
					cecho "Node version successfully updated and changed to $(node -v)." $green
                    printf "\n"
				else
					cecho "NVM not updated or changed. Aborted!" $red
                    printf "\n"
				fi

				# Update NPM
				step "Updating packages..."

				read -p "Would you like to use Yarn or NPM? yarn/npm" updatePkg

				if [[ $updatePkg == 'yarn' ]];
				then
					if test "$(which yarn)"
					then
						yarn global upgrade
					else
						cecho "Yarn not installed. To use Yarn run ${bold}brew install yarn${normal} or ${bold}curl -o- -L https://yarnpkg.com/install.sh | bash${normal}. Defaulting to NPM..." $yellow
						npm update -g
					fi
				else
					npm update -g
				fi

				cecho "Packages successfully updated." $green

				# Update Apple apps
				step "Updating Mac Store apps..."
				sudo softwareupdate --all --install --force
				cecho "Mac apps updated" $green

				printf "\n"
				printf "\n"
				cecho "Your system has been successfully updated. Enjoy the fruits of spring and summer!" $green
			;;
			2)
				###############################################################################
				# Updating NPM/Yarn packages #
				###############################################################################
				step "Updating Node packages..."
				read -p "Would you like to use yarn, pnpm or npm to update your packages? y/p/n" updatePkg

                step "Backing up packages before update..."
				if [[ -f $location/storage/npm.bkp ]];
                then
                    read -p "There is a current NPM backup. Would you like to overwrite it? Y/n " $newNPM
                    if [[ $newNPM =~ ^([yY])$ ]];
                    then
                        rm -rf $location/storage/npm.bkp
                        npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/npm.bkp
                    else
                        cecho "NPM backup already exists. Skipping..." $dim
                        printf "\n"
                    fi
                else
                    npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/npm.bkp
                fi
                cecho "Packages successfully updated." $green
                printf "\n"

				if [[ $updatePkg =~ ^([yY])$ ]];
				then
					if test "$(which yarn)"
					then
						yarn global upgrade
					else
						cecho "Yarn not installed. To use Yarn run ${bold}brew install yarn${normal} or ${bold}curl -o- -L https://yarnpkg.com/install.sh | bash${normal}. Defaulting to NPM..." $yellow
						npm update -g
					fi
				elif [[ $updatePkg =~ ^([pP])$ ]];
				then
					if test "$(which pnpm)"
					then
						pnpm up --latest --global
					else
						cecho "pnpm not installed. To use pnpm run ${bold}brew install pnpm${normal} or ${bold}curl -fsSL https://get.pnpm.io/install.sh | PNPM_VERSION=7.0.0-rc.5 sh -${normal}. Defaulting to NPM..." $yellow
						npm update -g
					fi
				else
					npm update -g
				fi
				cecho "All $updatePkg packages updated." $green
                printf "\n"
			;;
			3)
				###############################################################################
				# Switching Node versions with NVM #
				###############################################################################
				step "Changing Node versions..."
				read -p "What version would you like to change to?" $nodeChange

				if [[ "$(which nvm)" ]];
				then
					nodeVersion=$(node -v)
					nvm install ${nodeChange:-node} --reinstall-packages-from=$nodeVersion --latest-npm
					nvm use node
					nvm alias default ${nodeChange:-node}
					cecho "Node version successfully updated and changed to $(node -v)." $green
				else
					cecho "NVM NOT FOUND! Node version not updated or switched. Aborted!" $red
				fi
			;;
			4)
				###############################################################################
				# Updating and upgrading Homebrew #
				###############################################################################
				if test "$(which brew)"
				then
					step "Backing up Brew before update..."
					if [[ ! -f ${location}/storage/Brewfile.bkp ]];
					then
						brew bundle dump --file=${location}/storage/Brewfile.bkp
					else
						read -p "There is a current Brewfile backup. Would you like to overwrite it? Y/n " $newBrewfile
						if [[ $newBrewfile =~ ^([yY])$ ]];
						then
							rm -rf ${location}/storage/Brewfile.bkp
							brew bundle dump --file=${location}/storage/Brewfile.bkp
						else
							cecho "Homebrew backup aborted. Skipping..." $dim
							printf "\n"
						fi
					fi
					if [[ -f $HOME/Brewfile.lock.json ]];
					then
						cp $HOME/Brewfile.lock.json $location/storage/Brewfile.lock.json.bkp
					fi
					cecho "Successfully backed all Homebrew packages." $green
					step "Updating Brew..."
					brew update
					brew upgrade
					brew cleanup
					brew cleanup -s
					cecho "Successfully updated all Homebrew to the latest versions." $green
					printf "\n"
				else
					cecho "Can't find an installtion of Homebrew. Skipping..." $dim
					printf "\n"
				fi
			;;
			5)
				###############################################################################
				# Updating macOS App Store apps #
				###############################################################################
				step "Updating Mac Store apps..."
				sudo softwareupdate --all --install --force
				# sudo rm -rf /Library/Developer/CommandLineTools
  				# sudo xcode-select --install
				cecho "All Apple apps updated" $green
			;;
			6)
				###############################################################################
				# Updating Composer #
				###############################################################################
				if [[ ! "$(which composer)" ]];
                then
                    step "Backing up Composer installs before update..."
                    if [[ -f $HOME/.composer/composer.json ]];
					then
						if [[ -f $location/storage/composer.json.bkp ]];
						then
							read -p "There is a current Composer backup. Would you like to overwrite it? Y/n " $newComposer
							if [[ $newComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/composer.json.bkp
								cp $HOME/.composer/composer.json $location/storage/composer.json.bkp
							else
								cecho "Composer backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.json $location/storage/composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.composer/composer.lock ]];
					then
						if [[ -f $location/storage/composer.lock.bkp ]];
						then
							read -p "There is a current Composer Lockfile backup. Would you like to overwrite it? Y/n " $newComposerLock
							if [[ $newComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/composer.lock.bkp
								cp $HOME/.composer/composer.lock $location/storage/composer.lock.bkp
							else
								cecho "Composer Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.composer/composer.lock $location/storage/composer.lock.bkp
						fi
					fi
					cecho "Successfully backed all Composer packages." $green
					printf "\n"
                    composer selfupdate
                    composer global upgrade
                    cecho "All Composer installs successfully updated." $green
                else
                    cecho "Unable to update Composer. Skipping..." $dim
                fi
			;;
			7)
				###############################################################################
				# Updating Ruby gems #
				###############################################################################
				step "Backing up Ruby gems before update..."
                if [[ -f $HOME/Gemfile ]];
                then
					if [[ -f $location/storage/Gemfile.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/storage/Gemfile.bkp $location/storage/Gemfile.lock.bkp
							cp $HOME/Gemfile $location/storage/Gemfile.bkp
                    		cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	cp $HOME/Gemfile $location/storage/Gemfile.bkp
                    	cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
					fi
                else
					if [[ -f $location/storage/gems.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/storage/gems.bkp
							gem list --no-versions >> $location/storage/gems.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	gem list --no-versions >> $location/storage/gems.bkp
					fi
                fi
				cecho "Successfully backed up Ruby gems." $green
				printf "\n"

				if test ! "$(gem -v)"
                then
                    cecho "Unable to update Ruby gems.\n" $red
                else
					step "Updating Ruby gems..."
                    if [[ -f $HOME/Gemfile ]];
					then
						bundle update
						bundle clean
						printf "\n"
					else
						gem update --system
						gem update
						gem cleanup
						printf "\n"
					fi
					rbenv rehash
					cecho "All gems successfully updated." $green
					printf "\n"
                fi
			;;
			8)
				###############################################################################
				# Updating Ruby #
				###############################################################################
				step "Backing up Ruby gems before update..."
                if [[ -f $HOME/Gemfile ]];
                then
					if [[ -f $location/storage/Gemfile.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/storage/Gemfile.bkp $location/storage/Gemfile.lock.bkp
							cp $HOME/Gemfile $location/storage/Gemfile.bkp
                    		cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	cp $HOME/Gemfile $location/storage/Gemfile.bkp
                    	cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
					fi
                else
					if [[ -f $location/storage/gems.bkp ]];
					then
						read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
						if [[ $newGemfile =~ ^([yY])$ ]];
						then
							rm -rf $location/storage/gems.bkp
							gem list --no-versions >> $location/storage/gems.bkp
						else
							cecho "Gemfile backup already exists. Skipping..." $dim
							printf "\n"
						fi
					else
                    	gem list --no-versions >> $location/storage/gems.bkp
					fi
                fi
				cecho "Successfully backed up Ruby gems." $green
				printf "\n"
				if test "$(which rbenv)"
				then
					step "Updating Ruby..."
					rubyVersion=$(rbenv install -l | grep -v - | tail -1)
					rbenv install $rubyVersion
					rbenv local $rubyVersion
					rbenv global $rubyVersion
					cecho "Successfully updated Ruby to the latest version." $green
					printf "\n"
				else
					cecho "Unable to update to the latest Ruby version." $dim
					cecho "Please check your rbenv installation and try again. Skipping..." $dim
					printf "\n"
				fi
			;;
			9)
				###############################################################################
				# Updating WP-CLI #
				###############################################################################
				if [[ ! "$(which wp)" ]];
                then
                    step "Backing up WP-CLI packages before update..."
					if [[ -f $HOME/.wp-cli/packages/composer.json ]];
					then
						if [[ -f $location/storage/wp-composer.json.bkp ]];
						then
							read -p "There is a current WP-CLI backup. Would you like to overwrite it? Y/n " $newWpComposer
							if [[ $newWpComposer =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/composer.json.bkp
								cp $HOME/.wp-cli/packages/composer.json $location/storage/wp-composer.json.bkp
							else
								cecho "WP-CLI backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.json $location/storage/wp-composer.json.bkp
						fi
					fi
					if [[ -f $HOME/.wp-cli/packages/composer.lock ]];
					then
						if [[ -f $location/storage/wp-composer.lock.bkp ]];
						then
							read -p "There is a current WP-CLI Lockfile backup. Would you like to overwrite it? Y/n " $newWpComposerLock
							if [[ $newWpComposerLock =~ ^([yY])$ ]];
							then
								rm -rf $location/storage/wp-composer.lock.bkp
								cp $HOME/.wp-cli/packages/composer.lock $location/storage/wp-composer.lock.bkp
							else
								cecho "WP-CLI Lockfile backup already exists. Skipping..." $dim
								printf "\n"
							fi
						else
							cp $HOME/.wp-cli/packages/composer.lock $location/storage/wp-composer.lock.bkp
						fi
					fi
                    wp cli update
                    wp package update --all
                    cecho "All WP-CLI packages successfully updated." $green
					printf "\n"
                else
                    cecho "Unable to update WP-CLI. Skipping..." $dim
					printf "\n"
                fi
			;;
			*)
				printf "Update cancelled. But remember... ${blue}Winter is coming!${normal}\n"
				printf '\n'
				exit;
			;;
		esac
		;;
	3)
		##############################
		# Backing Up #
		##############################
		heading "Backing up packages"

		# Backup Homebrew
		if test ! "$(which brew)"
		then
			cecho "Unable to backup Homebrew. Please check your Homebrew installation." $red
		else
			step "Backing up Homebrew..."
			if [[ ! -f ${location}/storage/Brewfile.bkp ]];
			then
				HOMEBREW_NO_AUTO_UPDATE=1 brew bundle dump --file=${location}/storage/Brewfile.bkp
			else
				read -p "There is a current Brewfile backup. Would you like to overwrite it? Y/n " $newBrewfile
				if [[ $newBrewfile =~ ^([yY])$ ]];
				then
					rm -rf ${location}/storage/Brewfile.bkp
					HOMEBREW_NO_AUTO_UPDATE=1 brew bundle dump --file=${location}/storage/Brewfile.bkp
				else
					cecho "Homebrew backup aborted. Skipping..." $dim
					printf "\n"
				fi
			fi
			if [[ -f $HOME/Brewfile.lock.json ]];
			then
				cp $HOME/Brewfile.lock.json $location/storage/Brewfile.lock.json.bkp
			fi
		fi

		# Save gems to bkp file.
		if test ! "$(gem -v)"
		then
			cecho "Unable to backup Ruby gems." $red
		else
			step "Backing up Ruby gems..."
			if [[ -f $HOME/Gemfile ]];
			then
				if [[ -f $location/storage/Gemfile.bkp ]];
				then
					read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
					if [[ $newGemfile =~ ^([yY])$ ]];
					then
						rm -rf $location/storage/Gemfile.bkp $location/storage/Gemfile.lock.bkp
						cp $HOME/Gemfile $location/storage/Gemfile.bkp
						cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
					else
						cecho "Gemfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/Gemfile $location/storage/Gemfile.bkp
					cp $HOME/Gemfile.lock $location/storage/Gemfile.lock.bkp
				fi
			else
				if [[ -f $location/storage/gems.bkp ]];
				then
					read -p "There is a current Gemfile backup. Would you like to overwrite it? Y/n " $newGemfile
					if [[ $newGemfile =~ ^([yY])$ ]];
					then
						rm -rf $location/storage/gems.bkp
						gem list --no-versions >> $location/storage/gems.bkp
					else
						cecho "Gemfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					gem list --no-versions >> $location/storage/gems.bkp
				fi
			fi
			cecho "Successfully backed up Ruby gems." $green
			printf "\n"
		fi

		# Save npm modules to bkp file.
		# todo: if npm directory exists and if node is installed.
		step "Backing up npm modules..."
		if [[ ! "$(npm -v)" ]]; then
			cecho "Unable to backup NPM modules." $red
		else
			if [[ -f $location/storage/npm.bkp ]];
            then
                read -p "There is a current NPM backup. Would you like to overwrite it? Y/n " $newNPM
                if [[ $newNPM =~ ^([yY])$ ]];
                then
                    rm -rf $location/storage/npm.bkp
                    npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/npm.bkp
                else
                    cecho "NPM backup already exists. Skipping..." $dim
                    printf "\n"
                fi
            else
                npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/npm.bkp
            fi
            cecho "NPM packages successfully updated." $green
            printf "\n"
		fi

		# sudo mkdir a copy of composer.json
		step "Backing up composer packages..."
		if [[ ! "$(which composer)" ]]; then
			cecho "Unable to backup Composer packages." $red
		else
			if [[ -f $HOME/.composer/composer.json ]];
			then
				if [[ -f $location/storage/composer.json.bkp ]];
				then
					read -p "There is a current Composer backup. Would you like to overwrite it? Y/n " $newComposer
					if [[ $newComposer =~ ^([yY])$ ]];
					then
						rm -rf $location/storage/composer.json.bkp
						cp $HOME/.composer/composer.json $location/storage/composer.json.bkp
					else
						cecho "Composer backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.composer/composer.json $location/storage/composer.json.bkp
				fi
			fi
			if [[ -f $HOME/.composer/composer.lock ]];
			then
				if [[ -f $location/storage/composer.lock.bkp ]];
				then
					read -p "There is a current Composer Lockfile backup. Would you like to overwrite it? Y/n " $newComposerLock
					if [[ $newComposerLock =~ ^([yY])$ ]];
					then
						rm -rf $location/storage/composer.lock.bkp
						cp $HOME/.composer/composer.lock $location/storage/composer.lock.bkp
					else
						cecho "Composer Lockfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.composer/composer.lock $location/storage/composer.lock.bkp
				fi
			fi
			cecho "Successfully backed all Composer packages." $green
			printf "\n"
		fi

		# Take a copy of wp-cli packages
		step "Backing up WP-CLI packages..."
		if [[ ! "$(which wp)" ]];
		then
			if [[ -f $HOME/.wp-cli/packages/composer.json ]];
			then
				if [[ -f $location/storage/wp-composer.json.bkp ]];
				then
					read -p "There is a current WP-CLI backup. Would you like to overwrite it? Y/n " $newWpComposer
					if [[ $newWpComposer =~ ^([yY])$ ]];
					then
						rm -rf $location/storage/composer.json.bkp
						cp $HOME/.wp-cli/packages/composer.json $location/storage/wp-composer.json.bkp
					else
						cecho "WP-CLI backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.wp-cli/packages/composer.json $location/storage/wp-composer.json.bkp
				fi
			fi
			if [[ -f $HOME/.wp-cli/packages/composer.lock ]];
			then
				if [[ -f $location/storage/wp-composer.lock.bkp ]];
				then
					read -p "There is a current WP-CLI Lockfile backup. Would you like to overwrite it? Y/n " $newWpComposerLock
					if [[ $newWpComposerLock =~ ^([yY])$ ]];
					then
						rm -rf $location/storage/wp-composer.lock.bkp
						cp $HOME/.wp-cli/packages/composer.lock $location/storage/wp-composer.lock.bkp
					else
						cecho "WP-CLI Lockfile backup already exists. Skipping..." $dim
						printf "\n"
					fi
				else
					cp $HOME/.wp-cli/packages/composer.lock $location/storage/wp-composer.lock.bkp
				fi
			fi
			cecho "All WP-CLI packages successfully backed up." $green
			printf "\n"
		else
			cecho "Unable to backup WP-CLI. Skipping..." $dim
			printf "\n"
		fi

		printf '\n'
		cecho "Ah that feeling when you know all your plants are safely stored for the Winter." $green
		printf '\n'
		;;
	4)
		##############################
		# Restoring #
		##############################
		heading "Restoring packages"

		# Check if restore folder exists
		if [[ ! -d "$location/pottingshed" ]]; then
			mkdir "$location/pottingshed"
		fi

		# Restoring Brews & mas
		if test ! "$(which brew)"
		then
			cecho "Unable to restore Homebrew and mas. Please check your Homebrew and mas installations." $red
		else
			step "Restoring Homebrew..."

			if [[ -f $location/storage/Brewfile.bkp ]];
			then
				if [[ ! -d "$location/pottingshed/brew" ]]; then
					mkdir "$location/pottingshed/brew"
				fi

				step "Restoring from Brewfile.bkp..."

				if [[ -f "$location/storage/Brewfile.lock.json.bkp" ]]; then
					read -p "Would you like to restore Brewfile.lock.json? Y/n" restoreBrewLock

					if [[ $restoreBrewLock =~ ^([yY])$ ]];
					then
						mv $location/storage/Brewfile.lock.json.bkp $HOME/Brewfile.lock.json
						cp $location/storage/Brewfile.bkp $HOME/Brewfile
						cd $HOME
						brew bundle
						cd $location
					fi
				fi

				if [[ ! -f "$location/storage/Brewfile.lock.json.bkp" ]] || [[ $restoreBrewLock =~ ^([nN])$ ]];
				then
					cp $location/storage/Brewfile.bkp $location/pottingshed/brew/Brewfile
					cd $location/pottingshed/brew
					brew bundle
					cd $location
					mv $location/pottingshed/brew/Brewfile $HOME/Brewfile

					if [[ ! -f "$HOME/Brewfile.lock.json" ]]; then
						mv $location/pottingshed/brew/Brewfile.lock.json $HOME/Brewfile.lock.json
					fi
				fi

				cecho "Successfully restored all Homebrew formulaes, casks and mas installs." $green
			else
				cecho "Unable to locate backup file. Skipping restore..." $red
			fi
		fi

		# Restoring gems
		if test ! "$(gem -v)";
		then
			cecho "Unable to restore Ruby gems." $red
		else
			if [[ ! -d "$location/pottingshed/gems" ]]; then
				mkdir "$location/pottingshed/gems"
			fi

			read -p "Would you like to restore with Bundler or standard gam restore? b/s" rubyGems
			step "Restoring you Ruby gems..."
			if [[ $rubyGems =~ ^([bB][bundlerBundler]|[bB])$ ]];
			then
				if [[ -f $location/storage/Gemfile ]];
				then
					cp $location/storage/Gemfile $HOME
					cp $location/storage/Gemfile.lock $HOME
					bundle install --quiet
					if [[ $internet ]];
					then
						bundle update --quiet
					fi
					rbenv rehash
					cecho "Successfully restored all gems with Bundler, from Gemfile." $green
				else
					cecho "No Gemfile found. Unable to restore Ruby gems." $red
				fi
			else
				if [[ -f $location/storage/gems.bkp ]];
				then
					cp $location/storage/gems.bkp $location/pottingshed/gems
					cd $location/pottingshed/gems
					xargs gem unpack < $location/pottingshed/gems.bkp

					if [[ $internet ]];
					then
						xargs gem install < $location/pottingshed/gems.bkp
						printf '\n'
					else
						cecho "No internet connection detected. Please update when possible. Continuing restore..." $yellow
						xargs -I gemname gem build gemname/gemname.gemspec < $location/pottingshed/gems.bkp
						printf '\n'
					fi

					cd $location
					rm -rf $location/pottingshed/gems/* # Remove all unpacked gems to save storage.
					cecho "Successfully restored all gems." $green
				else
					cecho "No gem backup file found. Unable to restore Ruby gems." $red
				fi
			fi

		fi

		cecho "It's been a long winter but let's get those plants flowring again." $green
		printf '\n'
		;;
	*)
		printf "Thank you for using GreenHouse. Have a lovely sunny day and may the plants be ever in your favour.\n"
		printf '\n'
		exit;
		;;
esac

# Make script a global command
if [[ ! -d "/usr/local/bin/greenhouse" ]];
then
	printf '\n'
	heading "Making Greenhouse global"
	cp -r $location /usr/local/bin
	chmod +x /usr/local/bin/greenhouse/greenhouse
	printf "Thank you once again for using GreenHouse. You can now easily check on your plants from anywhere. Have a lovely sunny day and may the plants be ever in your favour!\n"
	printf '\n'
	exit;
fi
