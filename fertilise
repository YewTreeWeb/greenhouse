#!/bin/sh

### Variables ###

# Colours
reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[31m▸ $reset"
dim="\033[2m"
black=$(tput setaf 0)
purple="\033[1;35m"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
tag_green="\e[30;42m"
tag_blue="\e[30;46m"
bold=$(tput bold)
normal=$(tput sgr0)
underline="\e[37;4m"
indent="   "

internet=false
env=null

# Save Homebrew’s installed location.
BREW_PREFIX="$(brew --prefix)"

# Get full directory name of this script
location="$(cd "$(dirname "$0")" && pwd)"

# Shell environment variables
zshDIR="$(command -v zsh)"
zshRC="$HOME/.zshrc"

### Text Formatting ###

# Display outputted text in a chosen colour.
cecho() {
    echo "${2}${1}${reset}"
    return
}

# Create a formatted heading in the terminal.
heading() {
    local head="$1"; shift
    cecho "\n  ${bold}$((count++)). $head${normal}\n ─────────────────────────────────────────────────────\n" $white
}

installing() {
    local install="$1"; shift
    printf "  [↓] $install " "$@"
}

step() {
    printf "\n   ${dot}${underline}$@${reset}\n"
}

### System checks ###

# Get the current bash version running.
check_bash_version() {
    if ((BASH_VERSINFO[0] < 3)); then
        print_error "Sorry, you need at least bash-3.0 to run this script."
        exit 1
    fi
}

# Get and display the system's OS.
get_os() {

    local os=""
    local kernelName=""

    kernelName="$(uname -s)"

    if [ "$kernelName" == "Darwin" ]; then
        os="macOS"
    elif [ "$kernelName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os="ubuntu"
    else
        os="$kernelName"
    fi

    printf "%s" "$os"

}

# Get the current version of the system's OS.
get_os_version() {
    local os=""
    local version=""
    os="$(get_os)"
    if [ "$os" == "macOS" ]; then
        version="$(sw_vers -productVersion)"
    fi
    echo $version
}

# Check if the current session has access to the internet.
check_internet_connection() {
    if [ ping -q -w1 -c1 google.com ] &>/dev/null; then
        cecho "No internet found! Please check your internet connection." $red
        exit 0
    else
        cecho "You have an internet connection!" $green
        internet=true
    fi
}

# Cache the sudo password.
admin_pass() {
    # Ask for the administrator password upfront.
    sudo -v &>/dev/null
    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &

    cecho "Password cached to system." $green

}

### Misc ###

# Create and add content to SSH config file
create_ssh_config() {
touch $HOME/.ssh/config
cat <<EOT >> $HOME/.ssh/config
Host *
    AddKeysToAgent yes
    UseKeychain yes
    ForwardAgent yes
    IdentitiesOnly yes
    IdentityFile ~/.ssh/id_rsa
EOT
}

# Add Github host to ssh config
add_github_host () {
cat <<EOT >> $HOME/.ssh/config
Host github
    HostName github.com
    User $ghusername
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
EOT
}

# If user wants to install NPM packages with Yarn, add global path to shell profile
install_with_yarn() {
cat <<EOT >> $zshRC
export PATH="$(yarn global bin):$PATH"
EOT
}

# Find PHP memory files and change the limit to a higher amount
fix_php_memory() {
local phpVersion=$(php -v | grep ^PHP | cut -d' ' -f2)
local phpShortVersion=$(php -v | grep ^PHP | cut -d' ' -f2 | rev | cut -c 3- | rev)

if [ -d "/usr/local/etc/php/$phpVersion/" ];
then
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/php.ini
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/conf.d/php-memory-limits.ini
fi

if [ -d "/usr/local/etc/php/$phpShortVersion/" ];
then
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/php.ini
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/conf.d/php-memory-limits.ini
fi
}

# Install and setup ZSH completions
zsh_completion() {
brew install zsh-completions
cat <<EOT >> $zshRC
# ZSH Completion
if type brew &>/dev/null; then
    FPATH=${BREW_PREFIX}/share/zsh/site-functions:$sslPATH
fi
EOT
rm -f ~/.zcompdump; compinit
chmod go-w "${BREW_PREFIX}/share"
chmod go-w "/usr/local/share"
}

# Add Starship to zshrc
add_starship() {
cat <<EOT >> $zshRC
# Starship
eval "$(starship init zsh)"
EOT
}

install_zsh_dependecies() {
    # Clone ZSH dependency repos to `~/.zsh/` directory
    cd $HOME
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        # Download Oh My ZSH
        step "Installing Oh My ZSH..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        if [ $? -eq 0 ]; then
            cecho "Oh My ZSH installed." $green
        fi
    else
        cecho "Oh My ZSH already installed. Skipping..." $dim
    fi

    # Check if zsh_plugins exists.
    if [[ ! -d "$HOME/.zsh_plugins/" ]]; then
        mkdir "$HOME/.zsh_plugins"
        cd "$HOME/.zsh_plugins"
    else
        cd "$HOME/.zsh_plugins"
    fi

    # Check if zsh-syntax-highlighting is installed through Homebrew
    if brew list zsh-syntax-highlighting &> /dev/null; then
        # Add zsh-syntax-highlighting to .zshrc if not already present
        if ! grep -q "zsh-syntax-highlighting.zsh" ~/.zshrc; then
            step "Enabling plugin..."
            echo "source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ~/.zshrc
            cecho "zsh-syntax-highlighting enabled." $green
        else
            cecho "zsh-syntax-highlighting is already enabled. Skipping..." $dim
        fi
    fi

    if [ ! -f "$HOME/.zsh_plugins/completion.zsh" ]; then
        # Install completion plugin
        step "Installing completion plugin..."
        wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/completion.zsh 2>/dev/null
        cecho "Completion plugin installed." $green
    else
        cecho "Completion plugin already installed. Skipping..." $dim
    fi

    # Check if zsh-autosuggestions is installed through Homebrew
    if brew list zsh-autosuggestions &> /dev/null; then
        # Add zsh-autosuggestions to .zshrc if not already present
        if ! grep -q "zsh-autosuggestions.zsh" ~/.zshrc; then
            step "Enabling plugin..."
            echo "source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh" >> ~/.zshrc
            cecho "zsh-autosuggestions enabled." $green
        else
            cecho "zsh-autosuggestions is already enabled. Skipping..." $dim
        fi
    fi

    # Check if zsh-autocomplete is installed through Homebrew
    if brew list zsh-autocomplete &> /dev/null; then
        # Add zsh-autocomplete to .zshrc if not already present
        if ! grep -q "zsh-autocomplete.zsh" ~/.zshrc; then
            step "Enabling plugin..."
            echo "source /usr/local/share/zsh-autocomplete/zsh-autocomplete.zsh" >> ~/.zshrc
            cecho "zsh-autocomplete enabled." $green
        else
            cecho "zsh-autocomplete is already enabled. Skipping..." $dim
        fi
    fi

    if [ ! -f "$HOME/.zsh_plugins/history.zsh" ]; then
        # Download history config
        step "Installing history config..."
        wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/history.zsh 2>/dev/null
        cecho "History config installed." $green
    else
        cecho "History config already installed. Skipping..." $dim
    fi

    if [ ! -f "$HOME/.zsh_plugins/key-bindings.zsh" ]; then
        # Download key bindings config
        step "Installing key bindings config..."
        wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/key-bindings.zsh 2>/dev/null
        cecho "Key bindings config installed." $green
    else
        cecho "Key bindings config already installed. Skipping..." $dim
    fi

    # Go back to $location
    cd $location
}

# Install/Set shell env to ZSH
install_zsh() {
# Backup system .zshrc
if [[ -f $HOME/.zshrc ]];
then
	step "Backing up system .zshrc..."
	if [[ ! -d "${location}/storage" ]];
	then
		mkdir ${location}/storage
	fi

	if [[ -f $location/storage/.zshrc.bkp ]];
	then
		read -p "There is a current ZSH backup. Would you like to overwrite it? Y/n " $newZsh
		if [[ $newZsh =~ ^([yY])$ ]];
		then
			rm -rf $location/storage/.zshrc.bkp
			cp $HOME/.zshrc $location/storage/.zshrc.bkp
		else
			cecho ".zshrc backup already exists. Skipping..." $dim
			printf "\n"
		fi
	else
		cp $HOME/.zshrc $location/storage/.zshrc.bkp
	fi
	cecho ".zshrc backup successful." $green
fi

# Remove system generated .zshrc and use Greenhouse's zsh file
# step "Replacing system .zshrc with Greenhouse's .zshrc"
# if [ -f $HOME/.zshrc ];
# then
#     rm -rf $HOME/.zshrc
# fi
# cp $location/seeds/.zshrc $HOME
install_zsh_dependecies
}

# Check if system has an SSL if not create it.
ssl_check() {
    local ssl="$HOME/.ssl";
    local ssl_crt="$ssl/server.crt"
    local ssl_key="$ssl/server.key"

    local local_ip=$(ipconfig getifaddr $(route get default | grep interface | awk '{print $2}'))
    # local_ip=999.999.999 # (uncomment for testing)

    local domains=(
        "localhost"
        "*.localhost"
        "$local_ip"
        "127.0.0.1"
        "::1"
    )

    if test "$(which mkcert)"
    then
        step "Installing mkcert local CA..."
        mkcert -install
        cecho "CA successfully installed." $green
    else
        step "mkcert and nss not installed. Installing..."
        brew install mkcert nss
        cecho "mkcert & nss installed." $green
        printf "\n"
        step "Installing mkcert local CA..."
        mkcert -install
        cecho "CA successfully installed." $green
    fi

    if [[ ! -f $ssl_crt ]]; then
        cecho "Couldn't find an SSL certificate!" $red
        printf "\n"
        local make_key=true
    elif [[ ! $(openssl x509 -noout -text -in $ssl_crt | grep $local_ip) ]]; then
        cecho "Your IP Address has changed!" $yellow
        printf "\n"
        local make_key=true
    else
        cecho "SSL certificate found. No need for new SSL. Skipping..." $dim
        printf "\n"
    fi

    if [[ $make_key == true ]]; then
        step "Generating a new SSL certificate..."
        local count=$(( ${#domains[@]} - 1))
        mkcert ${domains[@]}

        # Create Slate's default certificate directory, if it doesn't exist
        test ! -d $ssl && mkdir $ssls

        # It appears mkcert bases its filenames off the number of domains passed after the first one.
        # This script predicts that filename, so it can copy it to Slate's default location.
        if [[ $count = 0 ]]; then
            mv $location/localhost.pem $ssl_crt
            mv $location/localhost-key.pem $ssl_key
        else
            mv $location/localhost+$count.pem $ssl_crt
            mv $location/localhost+$count-key.pem $ssl_key
        fi
    fi
}

# Add aliases for WP-CLI to .zshrc
zsh_wpcli_aliases() {
cat <<EOT >> $zshRC
# wp-cli quick update
alias wp-update="wp core update && wp core language update"
alias wp-asset-update="wp plugin update --all && wp theme update --all"
alias wp-update-all="wp core update && wp plugin update --all && wp theme update --all && wp package --all && wp core language update"
EOT
}
