#!/bin/sh

### Variables ###

# Colours
reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[31m▸ $reset"
dim="\033[2m"
black=$(tput setaf 0)
purple="\033[1;35m"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
tag_green="\e[30;42m"
tag_blue="\e[30;46m"
bold=$(tput bold)
normal=$(tput sgr0)
underline="\e[37;4m"
indent="   "

internet=false
env=null

# Set BREW_PREFIX to Homebrew's installation directory if available, or an empty string
BREW_PREFIX="$(command -v brew > /dev/null && brew --prefix || echo '')"

# Get full directory name of this script
location="$(cd "$(dirname "$0")" && pwd)"

# Shell environment variables
zshDIR="$(command -v zsh)"
shellProfile="$HOME/.zshrc"

### Text Formatting ###

# Display outputted text in a chosen colour.
cecho() {
    echo "${2}${1}${reset}"
    return
}

# Create a formatted heading in the terminal.
heading() {
    local head="$1"; shift
    cecho "\n  ${bold}$((count++)). $head${normal}\n ─────────────────────────────────────────────────────\n" $white
}

installing() {
    local install="$1"; shift
    printf "  [↓] $install " "$@"
}

step() {
    printf "\n   ${dot}${underline}$@${reset}\n"
}

### System checks ###

# Get the current bash version running.
check_bash_version() {
    if ((BASH_VERSINFO[0] < 3)); then
        print_error "Sorry, you need at least bash-3.0 to run this script."
        exit 1
    fi
}

# Get and display the system's OS.
get_os() {
    local os=""
    local kernelName=""
    kernelName="$(uname -s)"

    if [ "$kernelName" == "Darwin" ]; then
        os="macOS"
    elif [ "$kernelName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os="ubuntu"
    else
        os="$kernelName"
    fi

    printf "%s" "$os"
}

# Get the current version of the system's OS.
get_os_version() {
    local os=""
    local version=""
    os="$(get_os)"

    if [[ "$os" == "macOS" ]]; then
        version="$(sw_vers -productVersion)"
    fi
    echo $version
}

# Check if the current session has access to the internet.
check_internet_connection() {
    if ping -q -w 1 -c 1 google.com &>/dev/null; then
        cecho "You have an internet connection!" $green
        internet=true
    else
        cecho "No internet found! Please check your internet connection." $red
        exit 0
    fi
}

# Cache the sudo password.
admin_pass() {
    # Ask for the administrator password upfront.
    sudo -v &>/dev/null
    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &

    cecho "Password cached to system." $green

}

### Misc ###

# Create and add content to SSH config file
create_ssh_config() {
touch $HOME/.ssh/config
cat <<EOF >> $HOME/.ssh/config
Host *
    AddKeysToAgent yes
    ForwardAgent yes
    IdentitiesOnly yes
    IdentityFile ~/.ssh/id_rsa
EOF
}

# Add Github host to ssh config
add_github_host () {
cat <<EOF >> $HOME/.ssh/config

Host github
    HostName github.com
    User $ghusername
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
EOF
}

# Find PHP memory files and change the limit to a higher amount
fix_php_memory() {
    local phpVersion=$(php -v | grep ^PHP | cut -d' ' -f2)
    local phpShortVersion=$(php -v | grep ^PHP | cut -d' ' -f2 | rev | cut -c 3- | rev)

    if [[ -d "/usr/local/etc/php/$phpVersion/" ]]; then
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/php.ini
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/conf.d/php-memory-limits.ini
    fi

    if [[ -d "/usr/local/etc/php/$phpShortVersion/" ]]; then
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/php.ini
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/conf.d/php-memory-limits.ini
    fi

    brew services restart php
}

# Install and setup ZSH completions
zsh_completion() {
brew install zsh-completions
cat <<EOF >> $shellProfile
# ZSH Completion
if type brew &>/dev/null; then
    PATH=${BREW_PREFIX}/share/zsh/site-functions:$sslPATH
fi
EOF
rm -f ~/.zcompdump; compinit
chmod go-w "${BREW_PREFIX}/share"
chmod go-w "/usr/local/share"
}

install_zsh_dependecies() {
    # Clone ZSH dependency repos to `~/.zsh/` directory
    cd $HOME
    if [[ ! -d "$HOME/.oh-my-zsh" ]]; then
        # Download Oh My ZSH
        step "Installing Oh My ZSH..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
        if [[ -d $HOME/.oh-my-zsh ]]; then
            cecho "Oh My ZSH successfully installed." $green
			sudo chown -R $(whoami):admin "$HOME/.oh-my-zsh"
		else
			cecho "Failed to install Oh My ZSH" $red
        fi
    else
        cecho "Oh My ZSH already installed. Skipping..." $dim
    fi

	# Install Spaceship command prompt
	zshTheme="$HOME/.oh-my-zsh/custom/themes"
	if [[ -f $zshTheme/spaceship-prompt/spaceship.zsh-theme ]]; then
		cecho "Spaceship already installed. Skipping..." $dim
	else
		sudo chown -R $(whoami):admin "$HOME/.oh-my-zsh/custom"
		sudo chflags norestricted $zshTheme
		git clone https://github.com/spaceship-prompt/spaceship-prompt.git "$zshTheme/spaceship-prompt" --depth=1
		sudo ln -s "$zshTheme/spaceship-prompt/spaceship.zsh-theme" "$zshTheme/spaceship.zsh-theme"
	fi

    # Check if zsh_plugins exists.
    if [[ ! -d "$HOME/.zsh_plugins/" ]]; then
        mkdir "$HOME/.zsh_plugins"
    fi
    cd "$HOME/.zsh_plugins"

    # Check if zsh-syntax-highlighting is installed through Homebrew
    if brew list zsh-syntax-highlighting &> /dev/null; then
        # Add zsh-syntax-highlighting to .zshrc if not already present
        if ! grep -q "zsh-syntax-highlighting.zsh" ~/.zshrc; then
            step "Enabling plugin..."
            echo "source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ~/.zshrc
            cecho "zsh-syntax-highlighting enabled." $green
        else
            cecho "zsh-syntax-highlighting is already enabled. Skipping..." $dim
        fi
    fi

    if brew list zsh-completions &> /dev/null; then
        # Install completion plugin
        step "Installing completion plugin..."
        zsh_completion
        cecho "Completion plugin installed." $green
    else
        cecho "Completion plugin already installed. Skipping..." $dim
    fi

    # Check if zsh-autosuggestions is installed through Homebrew
    if brew list zsh-autosuggestions &> /dev/null; then
        # Add zsh-autosuggestions to .zshrc if not already present
        if ! grep -q "zsh-autosuggestions.zsh" ~/.zshrc; then
            step "Enabling plugin..."
            echo "source /usr/local/share/zsh-autosuggestions/zsh-autosuggestions.zsh" >> ~/.zshrc
            cecho "zsh-autosuggestions enabled." $green
        else
            cecho "zsh-autosuggestions is already enabled. Skipping..." $dim
        fi
    fi

    # Check if zsh-autocomplete is installed through Homebrew
    if brew list zsh-autocomplete &> /dev/null; then
        # Add zsh-autocomplete to .zshrc if not already present
        if ! grep -q "zsh-autocomplete.zsh" ~/.zshrc; then
            step "Enabling plugin..."
            echo "source /usr/local/share/zsh-autocomplete/zsh-autocomplete.zsh" >> ~/.zshrc
            cecho "zsh-autocomplete enabled." $green
        else
            cecho "zsh-autocomplete is already enabled. Skipping..." $dim
        fi
    fi

    if [[ ! -f "$HOME/.zsh_plugins/history.zsh" ]]; then
        # Download history config
        step "Installing history config..."
        wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/history.zsh 2>/dev/null
        cecho "History config installed." $green
    else
        cecho "History config already installed. Skipping..." $dim
    fi

    if [[ ! -f "$HOME/.zsh_plugins/key-bindings.zsh" ]]; then
        # Download key bindings config
        step "Installing key bindings config..."
        wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/key-bindings.zsh 2>/dev/null
        cecho "Key bindings config installed." $green
    else
        cecho "Key bindings config already installed. Skipping..." $dim
    fi
    # Go back to $location
    cd $location
}

# Add aliases for WP-CLI to .zshrc
zsh_wpcli_aliases() {
cat <<EOF >> $shellProfile
# wp-cli quick update
alias wp-update="wp core update && wp core language update"
alias wp-update --assets="wp plugin update --all && wp theme update --all"
alias wp-update --all="wp core update && wp plugin update --all && wp theme update --all && wp package --all && wp core language update"
EOF
}

# Add VSCode command line tool to .zshrc
vscode_commandline() {
cat <<EOF >> $shellProfile
# Add Visual Studio Code (code)
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
EOF
}

# Add a shopify folder and shortcut to .zshrc
shopfiy_dir_shortcut() {
# Create folder for Shopify themes
if [[ ! -d "$HOME/Sites/Shopify" ]]; then
	sudo mkdir $HOME/Sites/Shopify
	sudo chown -R $(whoami):admin "$HOME/Sites/Shopify"
fi
# Create folder for Shopify Apps
if [[ ! -d "$HOME/Developer/Shopify" ]]; then
	sudo mkdir $HOME/Developer/Shopify
	sudo chown -R $(whoami):admin "$HOME/Developer/Shopify"
fi

if grep -q 'shopthemes' $shellProfile; then
	cecho "Shortcut for Shopify themes directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Shopify themes directory
alias shopthemes='cd $HOME/Sites/Shopify'
EOF
fi
if grep -q 'shopapps' $shellProfile; then
	cecho "Shortcut for Shopify apps directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Shopify apps directory
alias shopapps='cd $HOME/Developer/Shopify'
EOF
fi
}

# Add a shopify folder and shortcut to .zshrc
wp_dir_shortcut() {
# Create folder for WordPress sites
if [[ ! -d "$HOME/Sites/Wordpress" ]]; then
	sudo mkdir $HOME/Sites/Wordpress
fi

if grep -q 'wordpress' $shellProfile; then
	cecho "Shortcut for WordPress sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for WordPress directory
alias wordpress='cd $HOME/Sites/WordPress'
EOF
fi
}

# Add a Laravel folder and shortcut to .zshrc
laravel_dir_shortcut() {
# Create folder for Laravel sites
if [[ ! -d "$HOME/Sites/Laravel" ]]; then
	sudo mkdir $HOME/Sites/Laravel
fi

if grep -q 'lara' $shellProfile; then
	cecho "Shortcut for Laravel sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Laravel directory
alias lara='cd $HOME/Sites/Laravel'
EOF
fi
}

# Add a folder and shortcut to .zshrc for static sites
static_dir_shortcut() {
# Create folder for static sites
if [[ ! -d "$HOME/Sites/Static" ]]; then
	sudo mkdir $HOME/Sites/Static
fi

if grep -q 'static' $shellProfile; then
	cecho "Shortcut for the static sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for directory to static sites
alias static='cd $HOME/Sites/Static'
EOF
fi
}

# Add a Laravel folder and shortcut to .zshrc
jekyll_dir_shortcut() {
# Create folder for Jekyll sites
if [[ ! -d "$HOME/Sites/Jekyll" ]]; then
	sudo mkdir $HOME/Sites/Jekyll
fi

if grep -q 'hyde' $shellProfile; then
	cecho "Shortcut for Jekyll sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Jekyll directory
alias hyde='cd $HOME/Sites/Jekyll'
EOF
fi
}
