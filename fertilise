#!/bin/sh

### Variables ###

# Colours
reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[31mâ–¸ $reset"
dim="\033[2m"
black=$(tput setaf 0)
purple="\033[1;35m"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
tag_green="\e[30;42m"
tag_blue="\e[30;46m"
bold=$(tput bold)
normal=$(tput sgr0)
underline="\e[37;4m"
indent="   "

internet=false
env=null

# Save Homebrewâ€™s installed location.
BREW_PREFIX="$(brew --prefix)"

# Get full directory name of this script
location="$(cd "$(dirname "$0")" && pwd)"

# Shell environment variables
zshDIR="$(command -v zsh)"
shellProfile="$HOME/.zshrc"


### Text Formatting ###

# Display outputted text in a chosen colour.
cecho() {
    echo "${2}${1}${reset}"
    return
}

# Create a formatted heading in the terminal.
heading() {
    local head="$1"; shift
    cecho "\n  ${bold}$((count++)). $head${normal}\n â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n" $white
}

installing() {
    local install="$1"; shift
    printf "  [â†“] $install " "$@"
}

step() {
    printf "\n   ${dot}${underline}$@${reset}\n"
}

### System checks ###

# Get the current bash version running.
check_bash_version() {
    if ((BASH_VERSINFO[0] < 3)); then
        print_error "Sorry, you need at least bash-3.0 to run this script."
        exit 1
    fi
}

# Get and display the system's OS.
get_os() {

    local os=""
    local kernelName=""

    kernelName="$(uname -s)"

    if [ "$kernelName" == "Darwin" ]; then
        os="macOS"
    elif [ "$kernelName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os="ubuntu"
    else
        os="$kernelName"
    fi

    printf "%s" "$os"

}

# Get the current version of the system's OS.
get_os_version() {

    local os=""
    local version=""
    os="$(get_os)"

    if [[ "$os" == "macOS" ]]; then
        version="$(sw_vers -productVersion)"
    fi

    echo $version
}

# Check if the current session has access to the internet.
check_internet_connection() {
    if [ ping -q -w1 -c1 google.com ] &>/dev/null; then
        cecho "No internet found! Please check your internet connection." $red
        exit 0
    else
        cecho "You have an internet connection!" $green
        internet=true
    fi
}

# Cache the sudo password.
admin_pass() {
    # Ask for the administrator password upfront.

    sudo -v &>/dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &

    cecho "Password cached to system." $green

}

### Misc ###

# Create and add content to SSH config file
create_ssh_config() {
touch $HOME/.ssh/config
cat <<EOF >> $HOME/.ssh/config
Host *
    AddKeysToAgent yes
    ForwardAgent yes
    IdentitiesOnly yes
    IdentityFile ~/.ssh/id_rsa
EOF
}

# Add Github host to ssh config
add_github_host () {
cat <<EOF >> $HOME/.ssh/config

Host github
    HostName github.com
    User $ghusername
    PreferredAuthentications publickey
    IdentityFile ~/.ssh/id_rsa
EOF
}

# If user wants to install NPM packages with Yarn, add global path to shell profile
install_with_yarn() {
cat <<EOF >> $shellProfile
export PATH="$(yarn global bin):$PATH"
EOF
}

# Find PHP memory files and change the limit to a higher amount
fix_php_memory() {

local phpVersion=$(php -v | grep ^PHP | cut -d' ' -f2)
local phpShortVersion=$(php -v | grep ^PHP | cut -d' ' -f2 | rev | cut -c 3- | rev)

if [[ -d "/usr/local/etc/php/$phpVersion/" ]];
then
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/php.ini
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/conf.d/php-memory-limits.ini
fi

if [[ -d "/usr/local/etc/php/$phpShortVersion/" ]];
then
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/php.ini
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/conf.d/php-memory-limits.ini
fi

brew services restart php

}

# Install and setup ZSH completions
zsh_completion() {

brew install zsh-completions
cat <<EOF >> $shellProfile
# ZSH Completion
if type brew &>/dev/null; then
    PATH=${BREW_PREFIX}/share/zsh/site-functions:$sslPATH
fi
EOF
rm -f ~/.zcompdump; compinit
chmod go-w "${BREW_PREFIX}/share"
chmod go-w "/usr/local/share"
source $shellProfile
}

install_zsh_dependecies() {
cd $HOME

if [[ ! -d "$HOME/.oh-my-zsh" ]];
then
    # Download Oh My ZSH
    step "Installing Oh My ZSH..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    cecho "Oh My ZSH installed." $green
else
    cecho "Oh My ZSH already installed. Skipping..." $dim
fi

# Check if zsh_plugins exists.
if [[ ! -d "$HOME/.zsh_plugins/" ]]; then
    sudo mkdir "$HOME/.zsh_plugins"
fi
cd "$HOME/.zsh_plugins"

if [[ ! -d "$HOME/.zsh_plugins/fast-syntax-highlighting" ]];
then
    # Install syntax highlighting
    step "Installing syntax highlighting..."
    git clone https://github.com/zdharma/fast-syntax-highlighting 2>/dev/null
    cecho "Syntax highlighting installed." $green
else
    cecho "Syntax highlighting already installed. Skipping..." $dim
fi

if [[ ! -f "$HOME/.zsh_plugins/completion.zsh" ]];
then
    # Install completion plugin
    step "Installing completion plugin..."
    wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/completion.zsh 2>/dev/null
    cecho "Completion plugin installed." $green
else
    cecho "Completion plugin already installed. Skipping..." $dim
fi

if [[ ! -d "$HOME/.zsh_plugins/zsh-autosuggestions" ]];
then
    # Download 'zsh-autosuggestions' plugin
    step "Installing zsh-autosuggestions..."
    git clone https://github.com/zsh-users/zsh-autosuggestions 2>/dev/null
    cecho "zsh-autosuggestions installed." $green
else
    cecho "zsh-autosuggestions already installed. Skipping..." $dim
fi

if [[ ! -f "$HOME/.zsh_plugins/history.zsh" ]];
then
    # Download history config
    step "Installing history config..."
    wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/history.zsh 2>/dev/null
    cecho "History config installed." $green
else
    cecho "History config already installed. Skipping..." $dim
fi

if [[ ! -f "$HOME/.zsh_plugins/key-bindings.zsh" ]];
then
    # Download key bindings config
    step "Installing key bindings config..."
    wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/key-bindings.zsh 2>/dev/null
    cecho "Key bindings config installed." $green
else
    cecho "Key bindings config already installed. Skipping..." $dim
fi

if [[ ! -d "$HOME/.zsh_plugins/spaceship-prompt" ]];
then
    # Download key bindings config
    step "Installing Spaceship prompt theme..."
    git clone https://github.com/spaceship-prompt/spaceship-prompt.git "$ZSH_CUSTOM/themes/spaceship-prompt" --depth=1 2>/dev/null
	ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme"
	if grep -q 'robbyrussell' $shellProfile; then
		sed -i "" -e "s/ZSH_THEME=\"robbyrussell\"/ZSH_THEME=\"spaceship\"/g" $shellProfile
	fi
    cecho "Spaceship prompt theme installed." $green
else
    cecho "Spaceship prompt theme already installed. Skipping..." $dim
fi

# Go back to $location
cd $location

}

# Install/Set shell env to ZSH
install_zsh() {

if test "$(which brew)"
then
    if [[ "$zshDIR" != '/usr/local/bin/zsh' ]];
    then
        brew install zsh

        # Switch to using brew-installed zsh as default shell
        if ! fgrep -q "${BREW_PREFIX}/bin/zsh" /etc/shells; then
            echo "${BREW_PREFIX}/bin/zsh" | sudo tee -a /etc/shells;
            chsh -s "${BREW_PREFIX}/bin/zsh";
        fi;
    else
		printf "Updating ZSH..."
		brew upgrade zsh 2> /dev/null
        cecho "ZSH successfully updated to latest version." $green
    fi

    # Change shell to modern zsh.
    sudo chsh -s "$zshDIR" "$USER"

    cecho "Shell set to ZSH." $green
else
    # Use default location for shell env - /bin/zsh
    sudo chsh -s "$zshDIR" "$USER"

    cecho "Shell set to system default ZSH." $green
fi

# Backup system .zshrc
if [[ -f $HOME/.zshrc ]];
then
	step "Backing up system .zshrc..."
	if [[ ! -d "${location}/storage" ]];
	then
		sudo mkdir ${location}/storage
	fi

	if [[ -f $location/storage/.zshrc.bkp ]];
	then
		read -p "There is a current ZSH backup. Would you like to overwrite it? Y/n " $newZsh
		if [[ $newZsh =~ ^([yY])$ ]];
		then
			rm -rf $location/storage/.zshrc.bkp
			cp $HOME/.zshrc $location/storage/.zshrc.bkp
		else
			cecho ".zshrc backup already exists. Skipping..." $dim
			printf "\n"
		fi
	else
		cp $HOME/.zshrc $location/storage/.zshrc.bkp
	fi
	cecho ".zshrc backup successful." $green
fi

# Remove system generated .zshrc and use Greenhouse's zsh file
# step "Replacing system .zshrc with Greenhouse's .zshrc"
if [[ -f $HOME/.zshrc ]];
then
	rm -rf $HOME/.zshrc
fi
cp $location/seeds/.zshrc $HOME
install_zsh_dependecies
source $shellProfile
}

# Check if system has an SSL if not create it.
ssl_setup() {
	local sslRoot="$HOME/.ssl";
	local ssl_crt="$sslRoot/server.crt"
	local ssl_key="$sslRoot/server.key"
	local b=$(tput bold)
	local c=$(tput sgr0)

	# Get IP
	local local_ip=$(ipconfig getifaddr $(route get default | grep interface | awk '{print $2}'))

	# Set SSL domains
	local domains=(
		"localhost"
		"$local_ip"
	)

	# Create a .ssl directory if it doesn't exist.
	if [[ ! -d "$HOME/.ssl" ]]; then
		sudo mkdir $HOME/.ssl
	fi

	if [[ ! -f $ssl_crt ]]; then
		printf "\n"
		cecho "ðŸ›‘  ${b}Couldn't find a SSL certificate:${c}" $red
		local make_key=true
	elif [[ ! $(openssl x509 -noout -text -in $ssl_crt | grep $local_ip) ]]; then
		printf "\n"
		cecho "ðŸ›‘  ${b}Your IP Address has changed:${c}" $red
		local make_key=true
	else
		printf "\n"
		cecho "âœ…  ${b}Your IP address is still the same. Skipping SSL setup...${c}" $dim
	fi

	if [[ $make_key == true ]]; then
		if test "$(which mkcert)"
		then
			cecho "Generating a new SSL certificate..." $green
			printf "\n"
		else
			cecho "Installing mkcert & nss..." $dim
			brew install mkcert nss 2>/dev/null
			cecho "Successfully installed mkcert & nss. Generating a new SSL certificate..." $green
			printf "\n"
		fi

		local count=$(( ${#domains[@]} - 1))
		mkcert ${domains[@]}

		# It appears mkcert bases its filenames off the number of domains passed after the first one.
		# This script predicts that filename, so it can copy it to the .ssl directory.
		if [[ $count = 0 ]]; then
			sudo mv $location/localhost.pem $ssl_crt
			sudo mv $location/localhost-key.pem $ssl_key
		else
			sudo mv $location/localhost+$count.pem $ssl_crt
			sudo mv $location/localhost+$count-key.pem $ssl_key
		fi
	fi
}

# Add aliases for WP-CLI to .zshrc
zsh_wpcli_aliases() {
cat <<EOF >> $shellProfile
# wp-cli quick update
alias wp-update="wp core update && wp core language update"
alias wp-update --assets="wp plugin update --all && wp theme update --all"
alias wp-update --all="wp core update && wp plugin update --all && wp theme update --all && wp package --all && wp core language update"
EOF
source $shellProfile
}

# Add VSCode command line tool to .zshrc
vscode_commandline() {
cat <<EOF >> $shellProfile
# Add Visual Studio Code (code)
export PATH="\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
EOF
source $shellProfile
}

# Add a shopify folder and shortcut to .zshrc
shopfiy_dir_shortcut() {
# Create folder for Shopify themes
if [[ ! -d "$HOME/Sites/Shopify" ]]; then
	sudo mkdir $HOME/Sites/Shopify
fi
# Create folder for Shopify Apps
if [[ ! -d "$HOME/Developer/Shopify" ]]; then
	sudo mkdir $HOME/Developer/Shopify
fi

if grep -q 'st' $shellProfile; then
	cecho "Shortcut for Shopify themes directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Shopify themes directory
alias st='cd ~/Sites/Shopify'
EOF
fi
if grep -q 'sa' $shellProfile; then
	cecho "Shortcut for Shopify apps directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Shopify apps directory
alias sa='cd ~/Developer/Shopify'
EOF
fi
source $shellProfile
}

# Add a shopify folder and shortcut to .zshrc
wp_dir_shortcut() {
# Create folder for WordPress sites
if [[ ! -d "$HOME/Sites/Wordpress" ]]; then
	sudo mkdir $HOME/Sites/Wordpress
fi

if grep -q 'wordpress' $shellProfile; then
	cecho "Shortcut for WordPress sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for WordPress directory
alias wordpress='cd ~/Sites/WordPress'
EOF
fi
source $shellProfile
}

# Add a Laravel folder and shortcut to .zshrc
laravel_dir_shortcut() {
# Create folder for Laravel sites
if [[ ! -d "$HOME/Sites/Laravel" ]]; then
	sudo mkdir $HOME/Sites/Laravel
fi

if grep -q 'lara' $shellProfile; then
	cecho "Shortcut for Laravel sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Laravel directory
alias lara='cd ~/Sites/Laravel'
EOF
fi
source $shellProfile
}

# Add a folder and shortcut to .zshrc for static sites
static_dir_shortcut() {
# Create folder for static sites
if [[ ! -d "$HOME/Sites/Static" ]]; then
	sudo mkdir $HOME/Sites/Static
fi

if grep -q 'static' $shellProfile; then
	cecho "Shortcut for the static sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for directory to static sites
alias static='cd ~/Sites/Static'
EOF
fi
source $shellProfile
}

# Add a Laravel folder and shortcut to .zshrc
jekyll_dir_shortcut() {
# Create folder for Jekyll sites
if [[ ! -d "$HOME/Sites/Jekyll" ]]; then
	sudo mkdir $HOME/Sites/Jekyll
fi

if grep -q 'hyde' $shellProfile; then
	cecho "Shortcut for Jekyll sites directory already exists. Skipping..." $dim
else
cat <<EOF >> $shellProfile
# Alias shortcut for Jekyll directory
alias hyde='cd ~/Sites/Jekyll'
EOF
fi
source $shellProfile
}
